2021-08-05 17:34:30 [main] ERROR o.s.b.d.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

No spring.config.import property has been defined

Action:

Add a spring.config.import=configserver: property to your configuration.
	If configuration is not required add spring.config.import=optional:configserver: instead.
	To disable this check, set spring.cloud.config.enabled=false or 
	spring.cloud.config.import-check.enabled=false.

2021-08-05 17:35:21 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.0.Final
2021-08-05 17:35:23 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Fetching config from server at : http://localhost:8888
2021-08-05 17:35:25 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Located environment: name=reactive-elastic-query-service,config-client, profiles=[reactive_elastic_query], label=null, version=b3307e7fd7f80fae282d9c7a4f862be114847e05, state=null
2021-08-05 17:35:25 [main] INFO  o.s.c.b.c.PropertySourceBootstrapConfiguration - Located property source: [BootstrapPropertySource {name='bootstrapProperties-configClient'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/OnceUponATimeMathley/spring-cloud-config-server-repository-3/config-client-reactive_elastic_query.yml'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/OnceUponATimeMathley/spring-cloud-config-server-repository-3/config-client.yml'}]
2021-08-05 17:35:25 [main] INFO  c.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - The following profiles are active: reactive_elastic_query
2021-08-05 17:35:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2021-08-05 17:35:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 222 ms. Found 0 Elasticsearch repository interfaces.
2021-08-05 17:35:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2021-08-05 17:35:26 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 19 ms. Found 1 Reactive Elasticsearch repository interfaces.
2021-08-05 17:35:27 [main] INFO  o.s.cloud.context.scope.GenericScope - BeanFactory id=f0191abf-feb8-302d-acd8-17ba40ae85b3
2021-08-05 17:35:28 [main] WARN  o.s.b.w.r.c.AnnotationConfigReactiveWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elasticDocumentController' defined in file [/home/onceuponatime/Documents/Java/Microservices/microservices-demo/reactive-elastic-query-service/target/classes/com/microservices/demo/reactive/elastic/query/service/api/ElasticDocumentController.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'twitterElasticQueryService' defined in file [/home/onceuponatime/Documents/Java/Microservices/microservices-demo/reactive-elastic-query-service/target/classes/com/microservices/demo/reactive/elastic/query/service/business/impl/TwitterElasticQueryService.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'twitterReactiveElasticQueryClient' defined in file [/home/onceuponatime/Documents/Java/Microservices/microservices-demo/reactive-elastic-query-service/target/classes/com/microservices/demo/reactive/elastic/query/service/business/impl/TwitterReactiveElasticQueryClient.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'elasticQueryRepository' defined in com.microservices.demo.reactive.elastic.query.service.repository.ElasticQueryRepository defined in @EnableReactiveElasticsearchRepositories declared on ReactiveElasticsearchRepositoriesRegistrar.EnableElasticsearchRepositoriesConfiguration: Invocation of init method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.elasticsearch.repository.support.SimpleReactiveElasticsearchRepository]: Constructor threw exception; nested exception is org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
2021-08-05 17:35:28 [reactor-http-epoll-2] INFO  o.s.d.e.support.VersionInfo - Version Spring Data Elasticsearch: 4.2.2
2021-08-05 17:35:28 [reactor-http-epoll-2] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client in build: 7.12.1
2021-08-05 17:35:28 [reactor-http-epoll-2] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client used: 7.9.1
2021-08-05 17:35:28 [reactor-http-epoll-2] WARN  o.s.d.e.support.VersionInfo - Version mismatch in between Elasticsearch Clients build/use: 7.12.1 - 7.9.1
2021-08-05 17:35:28 [reactor-http-epoll-2] ERROR reactor.core.publisher.Operators - Operator called default onErrorDropped
reactor.core.Exceptions$ErrorCallbackNotImplemented: org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
Caused by: org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$lookupActiveHost$3(SingleNodeHostProvider.java:101)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:102)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:220)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2397)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2193)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:172)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:2062)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:392)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:258)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:259)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
	at reactor.core.publisher.Operators.error(Operators.java:197)
	at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:71)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:221)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:221)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:221)
	at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:204)
	at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:224)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:273)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:413)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
	at reactor.core.publisher.EmitterProcessor.drain(EmitterProcessor.java:491)
	at reactor.core.publisher.EmitterProcessor.tryEmitNext(EmitterProcessor.java:299)
	at reactor.core.publisher.SinkManySerialized.tryEmitNext(SinkManySerialized.java:97)
	at reactor.core.publisher.InternalManySink.emitNext(InternalManySink.java:27)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:189)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:189)
	at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:305)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:189)
	at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:173)
	at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:444)
	at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:399)
	at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:189)
	at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:555)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:192)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:259)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
	at reactor.core.publisher.Operators.error(Operators.java:197)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:52)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:517)
	at reactor.netty.transport.TransportConnector$MonoChannelPromise.setFailure(TransportConnector.java:471)
	at reactor.netty.transport.TransportConnector.lambda$doConnect$7(TransportConnector.java:206)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:609)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
	at io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.fulfillConnectPromise(AbstractEpollChannel.java:674)
	at io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.finishConnect(AbstractEpollChannel.java:693)
	at io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.epollOutReady(AbstractEpollChannel.java:567)
	at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:470)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:378)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:834)
2021-08-05 17:35:30 [main] INFO  o.s.b.a.l.ConditionEvaluationReportLoggingListener - 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2021-08-05 17:35:30 [main] ERROR o.s.boot.SpringApplication - Application run failed
org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'elasticDocumentController' defined in file [/home/onceuponatime/Documents/Java/Microservices/microservices-demo/reactive-elastic-query-service/target/classes/com/microservices/demo/reactive/elastic/query/service/api/ElasticDocumentController.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'twitterElasticQueryService' defined in file [/home/onceuponatime/Documents/Java/Microservices/microservices-demo/reactive-elastic-query-service/target/classes/com/microservices/demo/reactive/elastic/query/service/business/impl/TwitterElasticQueryService.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'twitterReactiveElasticQueryClient' defined in file [/home/onceuponatime/Documents/Java/Microservices/microservices-demo/reactive-elastic-query-service/target/classes/com/microservices/demo/reactive/elastic/query/service/business/impl/TwitterReactiveElasticQueryClient.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'elasticQueryRepository' defined in com.microservices.demo.reactive.elastic.query.service.repository.ElasticQueryRepository defined in @EnableReactiveElasticsearchRepositories declared on ReactiveElasticsearchRepositoriesRegistrar.EnableElasticsearchRepositoriesConfiguration: Invocation of init method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.elasticsearch.repository.support.SimpleReactiveElasticsearchRepository]: Constructor threw exception; nested exception is org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:800)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:229)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1204)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:564)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:524)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:944)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
	at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.refresh(ReactiveWebServerApplicationContext.java:64)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:338)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1332)
	at com.microservices.demo.reactive.elastic.query.service.ReactiveElasticQueryServiceApplication.main(ReactiveElasticQueryServiceApplication.java:11)
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'twitterElasticQueryService' defined in file [/home/onceuponatime/Documents/Java/Microservices/microservices-demo/reactive-elastic-query-service/target/classes/com/microservices/demo/reactive/elastic/query/service/business/impl/TwitterElasticQueryService.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'twitterReactiveElasticQueryClient' defined in file [/home/onceuponatime/Documents/Java/Microservices/microservices-demo/reactive-elastic-query-service/target/classes/com/microservices/demo/reactive/elastic/query/service/business/impl/TwitterReactiveElasticQueryClient.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'elasticQueryRepository' defined in com.microservices.demo.reactive.elastic.query.service.repository.ElasticQueryRepository defined in @EnableReactiveElasticsearchRepositories declared on ReactiveElasticsearchRepositoriesRegistrar.EnableElasticsearchRepositoriesConfiguration: Invocation of init method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.elasticsearch.repository.support.SimpleReactiveElasticsearchRepository]: Constructor threw exception; nested exception is org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:800)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:229)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1204)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:564)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:524)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:887)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:791)
	... 19 common frames omitted
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'twitterReactiveElasticQueryClient' defined in file [/home/onceuponatime/Documents/Java/Microservices/microservices-demo/reactive-elastic-query-service/target/classes/com/microservices/demo/reactive/elastic/query/service/business/impl/TwitterReactiveElasticQueryClient.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'elasticQueryRepository' defined in com.microservices.demo.reactive.elastic.query.service.repository.ElasticQueryRepository defined in @EnableReactiveElasticsearchRepositories declared on ReactiveElasticsearchRepositoriesRegistrar.EnableElasticsearchRepositoriesConfiguration: Invocation of init method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.elasticsearch.repository.support.SimpleReactiveElasticsearchRepository]: Constructor threw exception; nested exception is org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:800)
	at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:229)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1204)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:564)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:524)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:887)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:791)
	... 33 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'elasticQueryRepository' defined in com.microservices.demo.reactive.elastic.query.service.repository.ElasticQueryRepository defined in @EnableReactiveElasticsearchRepositories declared on ReactiveElasticsearchRepositoriesRegistrar.EnableElasticsearchRepositoriesConfiguration: Invocation of init method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.elasticsearch.repository.support.SimpleReactiveElasticsearchRepository]: Constructor threw exception; nested exception is org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1786)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:602)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:524)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:887)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:791)
	... 47 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.elasticsearch.repository.support.SimpleReactiveElasticsearchRepository]: Constructor threw exception; nested exception is org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:225)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.lambda$getTargetRepositoryViaReflection$5(RepositoryFactorySupport.java:543)
	at java.base/java.util.Optional.map(Optional.java:265)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getTargetRepositoryViaReflection(RepositoryFactorySupport.java:543)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getTargetRepositoryViaReflection(RepositoryFactorySupport.java:528)
	at org.springframework.data.elasticsearch.repository.support.ReactiveElasticsearchRepositoryFactory.getTargetRepository(ReactiveElasticsearchRepositoryFactory.java:89)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:319)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.lambda$afterPropertiesSet$5(RepositoryFactoryBeanSupport.java:323)
	at org.springframework.data.util.Lazy.getNullable(Lazy.java:230)
	at org.springframework.data.util.Lazy.get(Lazy.java:114)
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:329)
	at org.springframework.data.elasticsearch.repository.support.ReactiveElasticsearchRepositoryFactoryBean.afterPropertiesSet(ReactiveElasticsearchRepositoryFactoryBean.java:102)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1845)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782)
	... 58 common frames omitted
Caused by: org.springframework.data.elasticsearch.client.NoReachableHostException: Host 'localhost:9200' not reachable. Cluster state is offline.
	at org.springframework.data.elasticsearch.client.reactive.SingleNodeHostProvider.lambda$lookupActiveHost$3(SingleNodeHostProvider.java:101)
	at reactor.core.publisher.FluxHandle$HandleSubscriber.onNext(FluxHandle.java:102)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onNext(FluxMap.java:220)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79)
	at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2397)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:2193)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onSubscribe(FluxOnErrorResume.java:74)
	at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.onError(MonoFlatMap.java:172)
	at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onError(Operators.java:2062)
	at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:392)
	at reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:258)
	at reactor.core.publisher.FluxMap$MapConditionalSubscriber.onError(FluxMap.java:259)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
	at reactor.core.publisher.Operators.error(Operators.java:197)
	at reactor.core.publisher.MonoErrorSupplied.subscribe(MonoErrorSupplied.java:71)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:221)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:221)
	at reactor.core.publisher.FluxPeek$PeekSubscriber.onError(FluxPeek.java:221)
	at reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93)
	at reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onError(MonoFlatMapMany.java:204)
	at reactor.core.publisher.SerializedSubscriber.onError(SerializedSubscriber.java:124)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.whenError(FluxRetryWhen.java:224)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenOtherSubscriber.onError(FluxRetryWhen.java:273)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:413)
	at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onNext(FluxConcatMap.java:250)
	at reactor.core.publisher.EmitterProcessor.drain(EmitterProcessor.java:491)
	at reactor.core.publisher.EmitterProcessor.tryEmitNext(EmitterProcessor.java:299)
	at reactor.core.publisher.SinkManySerialized.tryEmitNext(SinkManySerialized.java:97)
	at reactor.core.publisher.InternalManySink.emitNext(InternalManySink.java:27)
	at reactor.core.publisher.FluxRetryWhen$RetryWhenMainSubscriber.onError(FluxRetryWhen.java:189)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:189)
	at reactor.netty.http.client.HttpClientConnect$MonoHttpConnect$ClientTransportSubscriber.onError(HttpClientConnect.java:305)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:189)
	at reactor.netty.resources.DefaultPooledConnectionProvider$DisposableAcquire.onError(DefaultPooledConnectionProvider.java:173)
	at reactor.netty.internal.shaded.reactor.pool.AbstractPool$Borrower.fail(AbstractPool.java:444)
	at reactor.netty.internal.shaded.reactor.pool.SimpleDequePool.lambda$drainLoop$9(SimpleDequePool.java:399)
	at reactor.core.publisher.FluxDoOnEach$DoOnEachSubscriber.onError(FluxDoOnEach.java:186)
	at reactor.core.publisher.MonoCreate$DefaultMonoSink.error(MonoCreate.java:189)
	at reactor.netty.resources.DefaultPooledConnectionProvider$PooledConnectionAllocator$PooledConnectionInitializer.onError(DefaultPooledConnectionProvider.java:555)
	at reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:192)
	at reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:259)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:106)
	at reactor.core.publisher.Operators.error(Operators.java:197)
	at reactor.core.publisher.MonoError.subscribe(MonoError.java:52)
	at reactor.core.publisher.Mono.subscribe(Mono.java:4150)
	at reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:103)
	at reactor.netty.transport.TransportConnector$MonoChannelPromise.tryFailure(TransportConnector.java:517)
	at reactor.netty.transport.TransportConnector$MonoChannelPromise.setFailure(TransportConnector.java:471)
	at reactor.netty.transport.TransportConnector.lambda$doConnect$7(TransportConnector.java:206)
	at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:578)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:571)
	at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:550)
	at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:491)
	at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:616)
	at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:609)
	at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)
	at io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.fulfillConnectPromise(AbstractEpollChannel.java:674)
	at io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.finishConnect(AbstractEpollChannel.java:693)
	at io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.epollOutReady(AbstractEpollChannel.java:567)
	at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:470)
	at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:378)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:834)
	Suppressed: java.lang.Exception: #block terminated with an error
		at reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:99)
		at reactor.core.publisher.Mono.block(Mono.java:1703)
		at org.springframework.data.elasticsearch.repository.support.SimpleReactiveElasticsearchRepository.createIndexAndMappingIfNeeded(SimpleReactiveElasticsearchRepository.java:69)
		at org.springframework.data.elasticsearch.repository.support.SimpleReactiveElasticsearchRepository.<init>(SimpleReactiveElasticsearchRepository.java:61)
		at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
		at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
		at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
		at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
		at org.springframework.beans.BeanUtils.instantiateClass(BeanUtils.java:212)
		at org.springframework.data.repository.core.support.RepositoryFactorySupport.lambda$getTargetRepositoryViaReflection$5(RepositoryFactorySupport.java:543)
		at java.base/java.util.Optional.map(Optional.java:265)
		at org.springframework.data.repository.core.support.RepositoryFactorySupport.getTargetRepositoryViaReflection(RepositoryFactorySupport.java:543)
		at org.springframework.data.repository.core.support.RepositoryFactorySupport.getTargetRepositoryViaReflection(RepositoryFactorySupport.java:528)
		at org.springframework.data.elasticsearch.repository.support.ReactiveElasticsearchRepositoryFactory.getTargetRepository(ReactiveElasticsearchRepositoryFactory.java:89)
		at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:319)
		at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.lambda$afterPropertiesSet$5(RepositoryFactoryBeanSupport.java:323)
		at org.springframework.data.util.Lazy.getNullable(Lazy.java:230)
		at org.springframework.data.util.Lazy.get(Lazy.java:114)
		at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:329)
		at org.springframework.data.elasticsearch.repository.support.ReactiveElasticsearchRepositoryFactoryBean.afterPropertiesSet(ReactiveElasticsearchRepositoryFactoryBean.java:102)
		at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1845)
		at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1782)
		at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:602)
		at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:524)
		at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
		at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
		at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
		at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
		at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
		at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380)
		at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300)
		at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:887)
		at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:791)
		at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:229)
		at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
		at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1204)
		at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:564)
		at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:524)
		at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
		at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
		at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
		at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
		at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
		at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380)
		at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300)
		at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:887)
		at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:791)
		at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:229)
		at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
		at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1204)
		at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:564)
		at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:524)
		at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
		at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
		at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
		at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
		at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
		at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1380)
		at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1300)
		at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:887)
		at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:791)
		at org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:229)
		at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1354)
		at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1204)
		at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:564)
		at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:524)
		at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335)
		at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)
		at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333)
		at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208)
		at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:944)
		at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:918)
		at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583)
		at org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.refresh(ReactiveWebServerApplicationContext.java:64)
		at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)
		at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:434)
		at org.springframework.boot.SpringApplication.run(SpringApplication.java:338)
		at org.springframework.boot.SpringApplication.run(SpringApplication.java:1343)
		at org.springframework.boot.SpringApplication.run(SpringApplication.java:1332)
		at com.microservices.demo.reactive.elastic.query.service.ReactiveElasticQueryServiceApplication.main(ReactiveElasticQueryServiceApplication.java:11)
2021-08-05 17:38:12 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.0.Final
2021-08-05 17:38:14 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Fetching config from server at : http://localhost:8888
2021-08-05 17:38:22 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Located environment: name=reactive-elastic-query-service,config-client, profiles=[reactive_elastic_query], label=null, version=b3307e7fd7f80fae282d9c7a4f862be114847e05, state=null
2021-08-05 17:38:22 [main] INFO  o.s.c.b.c.PropertySourceBootstrapConfiguration - Located property source: [BootstrapPropertySource {name='bootstrapProperties-configClient'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/OnceUponATimeMathley/spring-cloud-config-server-repository-3/config-client-reactive_elastic_query.yml'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/OnceUponATimeMathley/spring-cloud-config-server-repository-3/config-client.yml'}]
2021-08-05 17:38:22 [main] INFO  c.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - The following profiles are active: reactive_elastic_query
2021-08-05 17:38:23 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2021-08-05 17:38:23 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 184 ms. Found 0 Elasticsearch repository interfaces.
2021-08-05 17:38:23 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2021-08-05 17:38:23 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16 ms. Found 1 Reactive Elasticsearch repository interfaces.
2021-08-05 17:38:23 [main] INFO  o.s.cloud.context.scope.GenericScope - BeanFactory id=f0191abf-feb8-302d-acd8-17ba40ae85b3
2021-08-05 17:38:26 [reactor-http-epoll-2] INFO  o.s.d.e.support.VersionInfo - Version Spring Data Elasticsearch: 4.2.2
2021-08-05 17:38:26 [reactor-http-epoll-2] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client in build: 7.12.1
2021-08-05 17:38:26 [reactor-http-epoll-2] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client used: 7.9.1
2021-08-05 17:38:26 [reactor-http-epoll-2] WARN  o.s.d.e.support.VersionInfo - Version mismatch in between Elasticsearch Clients build/use: 7.12.1 - 7.9.1
2021-08-05 17:38:26 [reactor-http-epoll-2] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch cluster: 7.9.1
2021-08-05 17:38:26 [main] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: c1b1ecd9-a4cb-4d52-b56d-81be769f7b86

2021-08-05 17:38:28 [main] INFO  o.s.cloud.commons.util.InetUtils - Cannot determine local hostname
2021-08-05 17:38:29 [main] INFO  o.s.cloud.commons.util.InetUtils - Cannot determine local hostname
2021-08-05 17:38:29 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8183
2021-08-05 17:38:30 [main] INFO  o.s.cloud.commons.util.InetUtils - Cannot determine local hostname
2021-08-05 17:38:31 [main] INFO  o.s.cloud.commons.util.InetUtils - Cannot determine local hostname
2021-08-05 17:38:31 [main] INFO  c.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - Started ReactiveElasticQueryServiceApplication in 20.33 seconds (JVM running for 21.062)
2021-08-05 17:41:05 [reactor-http-epoll-6] INFO  c.m.d.r.e.q.s.b.i.TwitterElasticQueryService - Querying reactive elasticsearch for text kafka
2021-08-05 17:41:05 [reactor-http-epoll-6] INFO  c.m.d.r.e.q.s.b.i.TwitterReactiveElasticQueryClient - Getting data from elasticsearch for text kafka
2021-08-05 17:41:05 [reactor-http-epoll-6] INFO  c.m.d.r.e.q.s.a.ElasticDocumentController - Returning from query reactive service for text kafka!
2021-08-05 17:41:05 [reactor-http-epoll-6] INFO  reactor.Flux.Map.1 - onSubscribe(FluxMap.MapSubscriber)
2021-08-05 17:41:05 [reactor-http-epoll-6] INFO  reactor.Flux.Map.1 - request(1)
2021-08-05 17:41:09 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1422188594819600387, userId=2432015216, text=@bookishfables Kafka on the shore, createdAt=2021-08-02T13:32:38Z))
2021-08-05 17:41:10 [reactor-http-epoll-6] INFO  reactor.Flux.Map.1 - request(31)
2021-08-05 17:41:10 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7935504013414237076, userId=9067018613546855045, text=consectetuer porttitor libero Kafka dolor pulvinar, createdAt=2021-07-26T14:35:19+07:00))
2021-08-05 17:41:10 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=970362732458547060, userId=6511121256364764925, text=amet amet lectus Kafka ultricies magna, createdAt=2021-07-26T14:52:12+07:00))
2021-08-05 17:41:11 [parallel-5] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=144582643518054114, userId=1163347418374284971, text=malesuada massa consectetuer Kafka Lorem lectus, createdAt=2021-07-26T15:04:05+07:00))
2021-08-05 17:41:12 [parallel-6] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4395427490013574756, userId=9050177874049412436, text=lectus massa Fusce Kafka ultricies pulvinar, createdAt=2021-07-26T15:07:16+07:00))
2021-08-05 17:41:12 [parallel-7] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=161266336498020395, userId=2447898248118699533, text=adipiscing pulvinar dolor Kafka Maecenas Maecenas, createdAt=2021-07-26T14:38:19+07:00))
2021-08-05 17:41:13 [parallel-8] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=453636222838194273, userId=8087472809104594091, text=adipiscing Maecenas magna Kafka Maecenas ipsum, createdAt=2021-07-26T15:05:36+07:00))
2021-08-05 17:41:13 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4450632076280244782, userId=6636173432506892473, text=malesuada malesuada porttitor Kafka ultricies massa, createdAt=2021-07-26T15:14:19+07:00))
2021-08-05 17:41:14 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=243647193905508163, userId=1892070911316845250, text=adipiscing porttitor dolor Kafka purus Lorem, createdAt=2021-07-26T15:25:22+07:00))
2021-08-05 17:41:14 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5569144833852477134, userId=3021359567818212026, text=congue massa ultricies Kafka libero adipiscing, createdAt=2021-07-26T14:37:59+07:00))
2021-08-05 17:41:15 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4093968151609226290, userId=8192974543787419305, text=sit congue sed Kafka purus massa, createdAt=2021-07-26T14:43+07:00))
2021-08-05 17:41:15 [parallel-5] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8510138514362550221, userId=1726216321429027976, text=ipsum Maecenas sit Kafka Lorem purus, createdAt=2021-07-26T09:41:50Z))
2021-08-05 17:41:16 [parallel-6] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5089325387885561108, userId=1120944075323190247, text=libero amet libero Kafka Fusce Maecenas, createdAt=2021-07-30T10:04:39Z))
2021-08-05 17:41:16 [parallel-7] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2571128835014305250, userId=850575373011826900, text=sit ultricies massa Kafka ipsum Fusce, createdAt=2021-07-30T10:32:22Z))
2021-08-05 17:41:17 [parallel-8] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=12687913972681737, userId=1026946484615377395, text=elit dolor massa consectetuer Kafka malesuada purus, createdAt=2021-07-26T15:09:17+07:00))
2021-08-05 17:41:17 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2243581543925972786, userId=7580404732176931509, text=amet Lorem malesuada Fusce Kafka magna elit, createdAt=2021-07-26T15:14:39+07:00))
2021-08-05 17:41:18 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2670794498696099680, userId=5733350334614675185, text=Maecenas consectetuer ultricies dolor Kafka posuere Maecenas, createdAt=2021-07-26T15:18:20+07:00))
2021-08-05 17:41:18 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7298767918109903776, userId=2179650342387538300, text=pulvinar ipsum ipsum congue Kafka sit pulvinar, createdAt=2021-07-26T14:29:08+07:00))
2021-08-05 17:41:19 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5500524529411575893, userId=2582561074637908908, text=lectus congue ipsum porttitor Kafka sed consectetuer, createdAt=2021-07-26T14:34:49+07:00))
2021-08-05 17:41:19 [parallel-5] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8570330742704989871, userId=3627074620486574549, text=dolor posuere ipsum Maecenas Kafka congue elit, createdAt=2021-07-26T15:02:35+07:00))
2021-08-05 17:41:20 [parallel-6] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1550784481632136040, userId=1538469012142802687, text=pulvinar porttitor ultricies porttitor Kafka congue Fusce, createdAt=2021-07-26T15:19:11+07:00))
2021-08-05 17:41:20 [parallel-7] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6436486100303473288, userId=1638127533281526668, text=dolor porttitor massa dolor Kafka elit Fusce, createdAt=2021-07-26T15:33:34+07:00))
2021-08-05 17:41:21 [parallel-8] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=816752024160554394, userId=6603269068494629107, text=malesuada libero Lorem libero Kafka congue dolor, createdAt=2021-07-26T09:45Z))
2021-08-05 17:41:21 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2608530918311994986, userId=736537647812659885, text=libero pulvinar sed elit Kafka Lorem magna sed, createdAt=2021-07-26T15:10:47+07:00))
2021-08-05 17:41:21 [parallel-1] INFO  reactor.Flux.Map.1 - request(24)
2021-08-05 17:41:22 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5647614968859665430, userId=1920117532386996799, text=malesuada congue ipsum magna Kafka Maecenas posuere congue, createdAt=2021-07-26T14:59:44+07:00))
2021-08-05 17:41:22 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2187635374507147039, userId=3309695578628169255, text=congue sit congue lectus Kafka amet Maecenas ipsum, createdAt=2021-07-26T15:18:51+07:00))
2021-08-05 17:41:23 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1222064297714110326, userId=5255565729753437423, text=purus congue consectetuer lectus Kafka sed malesuada elit, createdAt=2021-07-26T15:17+07:00))
2021-08-05 17:41:23 [parallel-5] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6984393853914813100, userId=1109038015006958318, text=Lorem dolor adipiscing purus Kafka sed porttitor purus, createdAt=2021-07-26T15:22:32+07:00))
2021-08-05 17:41:24 [parallel-6] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1379815561212798684, userId=6694080825102144540, text=malesuada libero malesuada magna Kafka pulvinar malesuada posuere, createdAt=2021-07-26T15:34:54+07:00))
2021-08-05 17:41:24 [parallel-7] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3895000499844196258, userId=8062208312900369045, text=ipsum sed purus sit Kafka pulvinar porttitor Maecenas, createdAt=2021-07-26T14:32:08+07:00))
2021-08-05 17:41:25 [parallel-8] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6790575607235660761, userId=4442999735200209432, text=Fusce Maecenas Maecenas Lorem Kafka lectus elit ultricies, createdAt=2021-07-26T15:30:23+07:00))
2021-08-05 17:41:25 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3351791504231923291, userId=8005107336198916740, text=lectus massa Fusce sit Kafka massa purus magna, createdAt=2021-07-26T15:30:33+07:00))
2021-08-05 17:41:26 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2501876899854458924, userId=7654692692597648850, text=amet massa ultricies libero Kafka dolor elit consectetuer, createdAt=2021-07-26T09:45:20Z))
2021-08-05 17:41:26 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=157598554127354424, userId=3856836065782627785, text=ultricies ultricies elit sit Kafka Maecenas dolor Lorem, createdAt=2021-07-30T10:06:11Z))
2021-08-05 17:41:27 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5321815132974402253, userId=8863131391158178029, text=pulvinar Fusce elit lectus libero Kafka Lorem adipiscing porttitor, createdAt=2021-07-26T14:56:22+07:00))
2021-08-05 17:41:27 [parallel-5] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2771967807014667753, userId=6150773225029605494, text=sit dolor amet pulvinar congue Kafka malesuada lectus dolor, createdAt=2021-07-26T15:26:03+07:00))
2021-08-05 17:41:28 [parallel-6] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7923629660206829460, userId=3060541225394060976, text=ipsum congue ultricies Lorem adipiscing Kafka purus posuere libero, createdAt=2021-07-26T15:00:34+07:00))
2021-08-05 17:41:28 [parallel-7] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3456222801662574214, userId=8482753726495980302, text=lectus sed consectetuer porttitor dolor Kafka pulvinar massa amet, createdAt=2021-07-26T15:26:43+07:00))
2021-08-05 17:41:29 [parallel-8] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3234009635015145118, userId=7388470279331706419, text=magna Lorem pulvinar Fusce sed Kafka dolor amet Fusce, createdAt=2021-07-26T09:44Z))
2021-08-05 17:41:29 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7814959751481028627, userId=7824066283859977023, text=purus massa sed amet ipsum Kafka elit Maecenas Fusce, createdAt=2021-07-30T10:07:01Z))
2021-08-05 17:41:30 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6430171541309095525, userId=5026411651797320844, text=massa elit Lorem amet Lorem Kafka elit elit Fusce, createdAt=2021-07-30T10:32:32Z))
2021-08-05 17:41:30 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=9202533460243443363, userId=1628216668952273253, text=sed lectus elit posuere dolor Kafka amet posuere Lorem libero, createdAt=2021-07-26T14:53:22+07:00))
2021-08-05 17:41:31 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5845039887700473324, userId=1037217425713133746, text=sed purus pulvinar sit magna Kafka purus Lorem adipiscing dolor, createdAt=2021-07-26T15:19:21+07:00))
2021-08-05 17:41:31 [parallel-5] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1946270821123149970, userId=2862555515446120697, text=libero Maecenas sit amet massa Kafka Fusce ultricies ultricies ipsum, createdAt=2021-07-26T14:42:20+07:00))
2021-08-05 17:41:32 [parallel-6] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3111141286006188486, userId=6050891111057324363, text=sit porttitor magna libero elit Kafka posuere ipsum magna ipsum, createdAt=2021-07-26T14:42:30+07:00))
2021-08-05 17:41:32 [parallel-7] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4907371265933213986, userId=589832318928355880, text=ultricies consectetuer amet massa adipiscing Kafka pulvinar purus porttitor porttitor, createdAt=2021-07-26T15:08:36+07:00))
2021-08-05 17:41:33 [parallel-8] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2427052170279975374, userId=263664322945031278, text=ipsum dolor sit libero ipsum Kafka sit ultricies sit purus, createdAt=2021-07-26T15:22:52+07:00))
2021-08-05 17:41:33 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6767234865735190290, userId=4067660495888966105, text=porttitor sed consectetuer sit adipiscing Kafka posuere dolor sit sed, createdAt=2021-07-26T15:33:24+07:00))
2021-08-05 17:41:33 [parallel-1] INFO  reactor.Flux.Map.1 - request(24)
2021-08-05 17:41:34 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3623670829849242112, userId=4792612994037303391, text=ipsum libero sit amet adipiscing Kafka posuere elit ipsum sit, createdAt=2021-07-26T15:31:54+07:00))
2021-08-05 17:41:34 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1550522168645204140, userId=3759867453587386501, text=porttitor libero sit porttitor amet Kafka elit posuere sit consectetuer, createdAt=2021-07-27T10:31:38Z))
2021-08-05 17:41:35 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5419818686318780101, userId=2260837253464764178, text=ipsum Maecenas purus elit massa Kafka magna consectetuer sit sed, createdAt=2021-07-27T10:36:29Z))
2021-08-05 17:41:35 [parallel-5] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1931075580729887576, userId=8919118874110737665, text=ultricies consectetuer Fusce elit dolor Kafka magna adipiscing dolor lectus, createdAt=2021-07-30T10:05:51Z))
2021-08-05 17:41:36 [parallel-6] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8714090519834041105, userId=2606083834965476129, text=sed pulvinar Lorem ipsum consectetuer sed Kafka ipsum dolor sit consectetuer, createdAt=2021-07-26T14:30:48+07:00))
2021-08-05 17:41:36 [parallel-7] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1134395133650359029, userId=1041536791474242234, text=amet lectus massa consectetuer ultricies amet Kafka massa magna dolor sit, createdAt=2021-07-26T14:50:01+07:00))
2021-08-05 17:41:37 [parallel-8] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1183969179335643467, userId=1668375057148801148, text=ultricies Lorem posuere porttitor sit ipsum Kafka congue amet ipsum posuere, createdAt=2021-07-26T14:35:49+07:00))
2021-08-05 17:41:37 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3060139641388490458, userId=8193361242454704398, text=Lorem amet magna sed massa adipiscing Kafka massa malesuada ipsum consectetuer, createdAt=2021-07-26T14:38:29+07:00))
2021-08-05 17:41:38 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5441125883779941672, userId=7724897967463604121, text=magna libero Fusce malesuada congue pulvinar Kafka magna dolor ipsum ultricies, createdAt=2021-07-26T15:13:28+07:00))
2021-08-05 17:41:38 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=295337647063970275, userId=1172614501119330382, text=purus Maecenas porttitor consectetuer amet ultricies Kafka Maecenas Lorem Lorem sed, createdAt=2021-07-26T15:32:44+07:00))
2021-08-05 17:41:39 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5484139225139821064, userId=3651276376772312783, text=ultricies purus congue libero Fusce pulvinar Kafka sit Fusce massa malesuada, createdAt=2021-07-27T10:30:58Z))
2021-08-05 17:41:39 [parallel-5] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1422163328370098177, userId=1234068688183156736, text="Beyinlerimiz savaşsın isterdim ama görüyorum ki siz silahsızsınız bayım."
                            
                         - Fransız Kafka, createdAt=2021-08-02T18:52:14+07:00))
2021-08-05 17:41:40 [parallel-6] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1421045483489873920, userId=744868620, text=like Orwell also Kafka is not meant as a handbook
#CraigMurray #Assange, createdAt=2021-07-30T16:50:19+07:00))
2021-08-05 17:41:40 [parallel-7] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3309477115662805592, userId=8697837300503729723, text=Lorem elit amet amet congue ultricies Kafka congue massa dolor ipsum porttitor, createdAt=2021-07-26T14:36:49+07:00))
2021-08-05 17:41:41 [parallel-8] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5386587467360105117, userId=4143610365090291781, text=Maecenas malesuada congue ultricies malesuada Lorem Kafka pulvinar malesuada sit dolor pulvinar, createdAt=2021-07-26T14:35:39+07:00))
2021-08-05 17:41:41 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=117246751212424066, userId=5377945940719265560, text=ipsum magna libero lectus magna ultricies Kafka libero consectetuer Fusce purus pulvinar, createdAt=2021-07-26T15:04:55+07:00))
2021-08-05 17:41:42 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1590168500142904782, userId=8235024682767325195, text=ultricies posuere malesuada ultricies lectus ultricies Kafka amet sit libero lectus libero, createdAt=2021-07-26T14:39:59+07:00))
2021-08-05 17:41:42 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2014654582418452906, userId=4488144798302653699, text=adipiscing malesuada malesuada sit magna sit Kafka massa posuere adipiscing congue Maecenas, createdAt=2021-07-26T15:19:41+07:00))
2021-08-05 17:41:43 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6593272401298080887, userId=1811673596340720957, text=pulvinar malesuada elit Lorem congue libero Kafka pulvinar magna malesuada massa sit, createdAt=2021-07-26T09:41:40Z))
2021-08-05 17:41:43 [parallel-5] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6053522845398277665, userId=7709832382535533315, text=posuere ipsum massa massa libero sed Kafka libero congue porttitor dolor purus, createdAt=2021-07-26T09:45:50Z))
2021-08-05 17:41:44 [parallel-6] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1585409269023190784, userId=3921858341466437709, text=Lorem lectus sed Maecenas Maecenas consectetuer Kafka massa magna congue malesuada purus, createdAt=2021-07-27T10:33:59Z))
2021-08-05 17:41:44 [parallel-7] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2281630383517303034, userId=3107625207445197226, text=porttitor Fusce posuere magna Maecenas magna pulvinar Kafka sed libero lectus malesuada ipsum, createdAt=2021-07-26T15:04:45+07:00))
2021-08-05 17:41:45 [parallel-8] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2456867500274087988, userId=838670091172196883, text=Lorem malesuada posuere magna lectus dolor porttitor Kafka magna amet massa sit massa, createdAt=2021-07-26T15:23:22+07:00))
2021-08-05 17:41:45 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1430448915276121310, userId=906889588125833308, text=magna congue Lorem consectetuer adipiscing malesuada adipiscing Kafka elit ipsum consectetuer adipiscing libero, createdAt=2021-07-26T15:36:15+07:00))
2021-08-05 17:41:45 [parallel-1] INFO  reactor.Flux.Map.1 - request(24)
2021-08-05 17:41:46 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2908458315232951183, userId=5638094622761023694, text=dolor porttitor pulvinar Fusce porttitor amet posuere Kafka consectetuer Maecenas sit consectetuer magna, createdAt=2021-07-26T15:35:35+07:00))
2021-08-05 17:41:46 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1346806364935902717, userId=1342935179248634059, text=malesuada posuere amet massa libero sed amet Kafka malesuada massa congue pulvinar purus, createdAt=2021-07-26T09:44:20Z))
2021-08-05 17:41:47 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8853031541268519012, userId=2206952146899472606, text=libero magna congue dolor malesuada posuere elit Kafka adipiscing ultricies Lorem dolor pulvinar, createdAt=2021-07-27T10:34:29Z))
2021-08-05 17:41:47 [parallel-5] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6667606914811194768, userId=6750172216419144313, text=malesuada amet malesuada libero Fusce Fusce pulvinar Kafka sed ipsum consectetuer congue Fusce ipsum, createdAt=2021-07-26T14:44:20+07:00))
2021-08-05 17:41:48 [parallel-6] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8720212136459640302, userId=8762251491455957264, text=lectus consectetuer congue amet amet ipsum dolor Kafka Maecenas adipiscing dolor pulvinar sit massa, createdAt=2021-07-26T14:32:48+07:00))
2021-08-05 17:41:48 [parallel-7] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5862022960241408389, userId=4394243795644728583, text=ipsum porttitor purus massa ultricies ultricies consectetuer Kafka elit Lorem Maecenas massa consectetuer massa, createdAt=2021-07-26T15:22:42+07:00))
2021-08-05 17:41:49 [parallel-8] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3899320226530921002, userId=3009735476035889474, text=Fusce ultricies posuere Lorem purus pulvinar sed Kafka magna libero sit libero adipiscing consectetuer, createdAt=2021-07-26T15:28:03+07:00))
2021-08-05 17:41:49 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8057573462274103020, userId=7270917746386867374, text=Lorem libero elit dolor ultricies consectetuer amet posuere Kafka dolor adipiscing dolor libero malesuada posuere, createdAt=2021-07-26T14:31:28+07:00))
2021-08-05 17:41:50 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6880145128342011323, userId=1963800813722275458, text=lectus magna congue porttitor purus libero sit libero Kafka pulvinar amet lectus porttitor sed pulvinar, createdAt=2021-07-26T14:51:52+07:00))
2021-08-05 17:41:50 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5614107994765876407, userId=8428415356902645713, text=pulvinar massa Lorem elit consectetuer ipsum pulvinar ultricies Kafka Fusce adipiscing massa sit sit lectus, createdAt=2021-07-26T14:52:52+07:00))
2021-08-05 17:41:51 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2291621494029425471, userId=1438156041415626377, text=ultricies amet adipiscing elit consectetuer sit ultricies dolor Kafka posuere posuere pulvinar magna malesuada posuere, createdAt=2021-07-26T14:58:43+07:00))
2021-08-05 17:41:51 [parallel-5] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3720480056566308131, userId=1420302624863914601, text=congue ipsum ultricies purus amet elit purus amet Kafka ipsum congue pulvinar ipsum sed massa, createdAt=2021-07-26T15:11:27+07:00))
2021-08-05 17:41:52 [parallel-6] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7693904424711046643, userId=6871599133048265669, text=amet massa ipsum purus purus lectus Fusce Fusce Kafka dolor magna posuere consectetuer malesuada massa, createdAt=2021-07-26T15:33:04+07:00))
2021-08-05 17:41:52 [parallel-7] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7987671638862274993, userId=4052109570304230636, text=Fusce malesuada porttitor Maecenas libero amet dolor consectetuer Kafka malesuada malesuada sed amet libero ipsum, createdAt=2021-07-26T14:54:22+07:00))
2021-08-05 17:41:53 [parallel-8] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=9216784116454931562, userId=8670691132889342104, text=purus libero purus purus malesuada dolor massa adipiscing Kafka adipiscing adipiscing Maecenas posuere posuere malesuada, createdAt=2021-07-26T15:00:24+07:00))
2021-08-05 17:41:53 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5748234686292073712, userId=8120304127724159944, text=porttitor amet Maecenas Fusce ipsum consectetuer malesuada ipsum Kafka Lorem massa ipsum ultricies dolor ultricies, createdAt=2021-07-26T15:11:57+07:00))
2021-08-05 17:41:54 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=663144206100499430, userId=5573291019530254989, text=congue ipsum elit consectetuer ipsum pulvinar elit malesuada Kafka pulvinar posuere sed porttitor consectetuer posuere, createdAt=2021-07-26T15:27:33+07:00))
2021-08-05 17:41:54 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6558115410916753710, userId=9086490142521478449, text=elit adipiscing adipiscing malesuada dolor ipsum purus ipsum Kafka pulvinar magna massa purus massa sit, createdAt=2021-07-26T14:32:38+07:00))
2021-08-05 17:41:55 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6931234226188497347, userId=5020253436310468714, text=pulvinar adipiscing Lorem libero consectetuer massa purus ultricies Kafka sit dolor pulvinar sed dolor sed, createdAt=2021-07-26T14:43:30+07:00))
2021-08-05 17:41:55 [parallel-5] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8880375635061847848, userId=6862563791946064592, text=posuere consectetuer elit magna elit sit sed posuere Kafka massa consectetuer sit libero sit massa, createdAt=2021-07-26T15:33:14+07:00))
2021-08-05 17:41:56 [parallel-6] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1422164582441754626, userId=1072734240767234049, text=RT @pepi_nim_: -อ่าน Kafka on the shore แล้วร้องไห้
-คิดถึงเมมเบอร์ GOT7
-มีคนถามว่าคุนอยู่ที่ไหน แจบอมบอกว่า แมวชื่อคุน เฉยๆจ้า 
-ทำยังจะเ…, createdAt=2021-08-02T18:57:13+07:00))
2021-08-05 17:41:56 [parallel-7] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1422164817381511170, userId=709787533136138241, text=RT @pepi_nim_: -อ่าน Kafka on the shore แล้วร้องไห้
-คิดถึงเมมเบอร์ GOT7
-มีคนถามว่าคุนอยู่ที่ไหน แจบอมบอกว่า แมวชื่อคุน เฉยๆจ้า 
-ทำยังจะเ…, createdAt=2021-08-02T18:58:09+07:00))
2021-08-05 17:41:57 [parallel-8] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1422188527815516160, userId=2607871002, text=RT @pepi_nim_: -อ่าน Kafka on the shore แล้วร้องไห้
-คิดถึงเมมเบอร์ GOT7
-มีคนถามว่าคุนอยู่ที่ไหน แจบอมบอกว่า แมวชื่อคุน เฉยๆจ้า 
-ทำยังจะเ…, createdAt=2021-08-02T13:32:22Z))
2021-08-05 17:41:57 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4613210846292621990, userId=5396270724269897574, text=dolor malesuada purus amet lectus porttitor congue magna Kafka amet ipsum porttitor purus ipsum sit Lorem, createdAt=2021-07-26T15:01:24+07:00))
2021-08-05 17:41:57 [parallel-1] INFO  reactor.Flux.Map.1 - request(24)
2021-08-05 17:41:58 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7422582878256878538, userId=9018943332588576462, text=Lorem sed amet lectus ipsum adipiscing ipsum lectus Kafka pulvinar magna ipsum dolor porttitor Maecenas lectus, createdAt=2021-07-26T14:49:51+07:00))
2021-08-05 17:41:58 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3971238940296106513, userId=764174661961079562, text=sit ipsum Maecenas malesuada ipsum congue ultricies sed Kafka porttitor massa dolor ipsum dolor purus adipiscing, createdAt=2021-07-26T14:53:02+07:00))
2021-08-05 17:41:59 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8250848735908878406, userId=3334663991855153343, text=posuere pulvinar sed massa dolor consectetuer porttitor congue Kafka consectetuer adipiscing lectus magna posuere consectetuer malesuada, createdAt=2021-07-26T15:29:23+07:00))
2021-08-05 17:41:59 [parallel-5] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=519410000734721429, userId=195794894677924300, text=magna sed sit massa Fusce dolor elit congue Kafka Maecenas libero ipsum sed ultricies posuere massa, createdAt=2021-07-26T15:30:53+07:00))
2021-08-05 17:42:00 [parallel-6] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1422184614462771207, userId=1389924176337670150, text=RT @MarkBeom_France: 🌴— Twitter • 2021.08.02 | @jaybnow____hr

🐥 J'ai lu 'Kafka sur le Rivage' et la fin était juste... j'ai juste... wow..…, createdAt=2021-08-02T13:16:49Z))
2021-08-05 17:42:00 [parallel-7] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1422164095848099841, userId=1331292123237392388, text=RT @seanmdav: Ready for some Kafka-esque airline insanity? @AmericanAir cancelled not one, but two of my flights, stranded me overnight, di…, createdAt=2021-08-02T18:55:17+07:00))
2021-08-05 17:42:01 [parallel-8] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1422164657976971268, userId=3085366819, text=RT @zoolooy: @m7mdkurd I think Kafka wrote a story something like this. 
If it weren't all so disgustingly violent/painful, the absurdity c…, createdAt=2021-08-02T18:57:31+07:00))
2021-08-05 17:42:01 [parallel-8] INFO  reactor.Flux.Map.1 - onComplete()
2021-08-05 17:42:17 [reactor-http-epoll-6] INFO  c.m.d.r.e.q.s.b.i.TwitterElasticQueryService - Querying reactive elasticsearch for text kafka
2021-08-05 17:42:17 [reactor-http-epoll-6] INFO  c.m.d.r.e.q.s.b.i.TwitterReactiveElasticQueryClient - Getting data from elasticsearch for text kafka
2021-08-05 17:42:17 [reactor-http-epoll-6] INFO  c.m.d.r.e.q.s.a.ElasticDocumentController - Returning from query reactive service for text kafka!
2021-08-05 17:42:17 [reactor-http-epoll-6] INFO  reactor.Flux.Map.2 - onSubscribe(FluxMap.MapSubscriber)
2021-08-05 17:42:17 [reactor-http-epoll-6] INFO  reactor.Flux.Map.2 - request(1)
2021-08-05 17:42:18 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422188594819600387, userId=2432015216, text=@bookishfables Kafka on the shore, createdAt=2021-08-02T13:32:38Z))
2021-08-05 17:42:18 [reactor-http-epoll-6] INFO  reactor.Flux.Map.2 - request(31)
2021-08-05 17:42:19 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7935504013414237076, userId=9067018613546855045, text=consectetuer porttitor libero Kafka dolor pulvinar, createdAt=2021-07-26T14:35:19+07:00))
2021-08-05 17:42:19 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=970362732458547060, userId=6511121256364764925, text=amet amet lectus Kafka ultricies magna, createdAt=2021-07-26T14:52:12+07:00))
2021-08-05 17:42:20 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=144582643518054114, userId=1163347418374284971, text=malesuada massa consectetuer Kafka Lorem lectus, createdAt=2021-07-26T15:04:05+07:00))
2021-08-05 17:42:20 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4395427490013574756, userId=9050177874049412436, text=lectus massa Fusce Kafka ultricies pulvinar, createdAt=2021-07-26T15:07:16+07:00))
2021-08-05 17:42:21 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=161266336498020395, userId=2447898248118699533, text=adipiscing pulvinar dolor Kafka Maecenas Maecenas, createdAt=2021-07-26T14:38:19+07:00))
2021-08-05 17:42:21 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=453636222838194273, userId=8087472809104594091, text=adipiscing Maecenas magna Kafka Maecenas ipsum, createdAt=2021-07-26T15:05:36+07:00))
2021-08-05 17:42:22 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4450632076280244782, userId=6636173432506892473, text=malesuada malesuada porttitor Kafka ultricies massa, createdAt=2021-07-26T15:14:19+07:00))
2021-08-05 17:42:22 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=243647193905508163, userId=1892070911316845250, text=adipiscing porttitor dolor Kafka purus Lorem, createdAt=2021-07-26T15:25:22+07:00))
2021-08-05 17:42:23 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5569144833852477134, userId=3021359567818212026, text=congue massa ultricies Kafka libero adipiscing, createdAt=2021-07-26T14:37:59+07:00))
2021-08-05 17:42:23 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4093968151609226290, userId=8192974543787419305, text=sit congue sed Kafka purus massa, createdAt=2021-07-26T14:43+07:00))
2021-08-05 17:42:24 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8510138514362550221, userId=1726216321429027976, text=ipsum Maecenas sit Kafka Lorem purus, createdAt=2021-07-26T09:41:50Z))
2021-08-05 17:42:24 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5089325387885561108, userId=1120944075323190247, text=libero amet libero Kafka Fusce Maecenas, createdAt=2021-07-30T10:04:39Z))
2021-08-05 17:42:25 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2571128835014305250, userId=850575373011826900, text=sit ultricies massa Kafka ipsum Fusce, createdAt=2021-07-30T10:32:22Z))
2021-08-05 17:42:25 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=12687913972681737, userId=1026946484615377395, text=elit dolor massa consectetuer Kafka malesuada purus, createdAt=2021-07-26T15:09:17+07:00))
2021-08-05 17:42:26 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2243581543925972786, userId=7580404732176931509, text=amet Lorem malesuada Fusce Kafka magna elit, createdAt=2021-07-26T15:14:39+07:00))
2021-08-05 17:42:26 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2670794498696099680, userId=5733350334614675185, text=Maecenas consectetuer ultricies dolor Kafka posuere Maecenas, createdAt=2021-07-26T15:18:20+07:00))
2021-08-05 17:42:27 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7298767918109903776, userId=2179650342387538300, text=pulvinar ipsum ipsum congue Kafka sit pulvinar, createdAt=2021-07-26T14:29:08+07:00))
2021-08-05 17:42:27 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5500524529411575893, userId=2582561074637908908, text=lectus congue ipsum porttitor Kafka sed consectetuer, createdAt=2021-07-26T14:34:49+07:00))
2021-08-05 17:42:28 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8570330742704989871, userId=3627074620486574549, text=dolor posuere ipsum Maecenas Kafka congue elit, createdAt=2021-07-26T15:02:35+07:00))
2021-08-05 17:42:28 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1550784481632136040, userId=1538469012142802687, text=pulvinar porttitor ultricies porttitor Kafka congue Fusce, createdAt=2021-07-26T15:19:11+07:00))
2021-08-05 17:42:29 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6436486100303473288, userId=1638127533281526668, text=dolor porttitor massa dolor Kafka elit Fusce, createdAt=2021-07-26T15:33:34+07:00))
2021-08-05 17:42:29 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=816752024160554394, userId=6603269068494629107, text=malesuada libero Lorem libero Kafka congue dolor, createdAt=2021-07-26T09:45Z))
2021-08-05 17:42:30 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2608530918311994986, userId=736537647812659885, text=libero pulvinar sed elit Kafka Lorem magna sed, createdAt=2021-07-26T15:10:47+07:00))
2021-08-05 17:42:30 [parallel-1] INFO  reactor.Flux.Map.2 - request(24)
2021-08-05 17:42:30 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5647614968859665430, userId=1920117532386996799, text=malesuada congue ipsum magna Kafka Maecenas posuere congue, createdAt=2021-07-26T14:59:44+07:00))
2021-08-05 17:42:31 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2187635374507147039, userId=3309695578628169255, text=congue sit congue lectus Kafka amet Maecenas ipsum, createdAt=2021-07-26T15:18:51+07:00))
2021-08-05 17:42:31 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1222064297714110326, userId=5255565729753437423, text=purus congue consectetuer lectus Kafka sed malesuada elit, createdAt=2021-07-26T15:17+07:00))
2021-08-05 17:42:32 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6984393853914813100, userId=1109038015006958318, text=Lorem dolor adipiscing purus Kafka sed porttitor purus, createdAt=2021-07-26T15:22:32+07:00))
2021-08-05 17:42:32 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1379815561212798684, userId=6694080825102144540, text=malesuada libero malesuada magna Kafka pulvinar malesuada posuere, createdAt=2021-07-26T15:34:54+07:00))
2021-08-05 17:42:33 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3895000499844196258, userId=8062208312900369045, text=ipsum sed purus sit Kafka pulvinar porttitor Maecenas, createdAt=2021-07-26T14:32:08+07:00))
2021-08-05 17:42:33 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6790575607235660761, userId=4442999735200209432, text=Fusce Maecenas Maecenas Lorem Kafka lectus elit ultricies, createdAt=2021-07-26T15:30:23+07:00))
2021-08-05 17:42:34 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3351791504231923291, userId=8005107336198916740, text=lectus massa Fusce sit Kafka massa purus magna, createdAt=2021-07-26T15:30:33+07:00))
2021-08-05 17:42:34 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2501876899854458924, userId=7654692692597648850, text=amet massa ultricies libero Kafka dolor elit consectetuer, createdAt=2021-07-26T09:45:20Z))
2021-08-05 17:42:35 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=157598554127354424, userId=3856836065782627785, text=ultricies ultricies elit sit Kafka Maecenas dolor Lorem, createdAt=2021-07-30T10:06:11Z))
2021-08-05 17:42:35 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5321815132974402253, userId=8863131391158178029, text=pulvinar Fusce elit lectus libero Kafka Lorem adipiscing porttitor, createdAt=2021-07-26T14:56:22+07:00))
2021-08-05 17:42:36 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2771967807014667753, userId=6150773225029605494, text=sit dolor amet pulvinar congue Kafka malesuada lectus dolor, createdAt=2021-07-26T15:26:03+07:00))
2021-08-05 17:42:36 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7923629660206829460, userId=3060541225394060976, text=ipsum congue ultricies Lorem adipiscing Kafka purus posuere libero, createdAt=2021-07-26T15:00:34+07:00))
2021-08-05 17:42:37 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3456222801662574214, userId=8482753726495980302, text=lectus sed consectetuer porttitor dolor Kafka pulvinar massa amet, createdAt=2021-07-26T15:26:43+07:00))
2021-08-05 17:42:37 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3234009635015145118, userId=7388470279331706419, text=magna Lorem pulvinar Fusce sed Kafka dolor amet Fusce, createdAt=2021-07-26T09:44Z))
2021-08-05 17:42:38 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7814959751481028627, userId=7824066283859977023, text=purus massa sed amet ipsum Kafka elit Maecenas Fusce, createdAt=2021-07-30T10:07:01Z))
2021-08-05 17:42:38 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6430171541309095525, userId=5026411651797320844, text=massa elit Lorem amet Lorem Kafka elit elit Fusce, createdAt=2021-07-30T10:32:32Z))
2021-08-05 17:42:39 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=9202533460243443363, userId=1628216668952273253, text=sed lectus elit posuere dolor Kafka amet posuere Lorem libero, createdAt=2021-07-26T14:53:22+07:00))
2021-08-05 17:42:39 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5845039887700473324, userId=1037217425713133746, text=sed purus pulvinar sit magna Kafka purus Lorem adipiscing dolor, createdAt=2021-07-26T15:19:21+07:00))
2021-08-05 17:42:40 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1946270821123149970, userId=2862555515446120697, text=libero Maecenas sit amet massa Kafka Fusce ultricies ultricies ipsum, createdAt=2021-07-26T14:42:20+07:00))
2021-08-05 17:42:40 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3111141286006188486, userId=6050891111057324363, text=sit porttitor magna libero elit Kafka posuere ipsum magna ipsum, createdAt=2021-07-26T14:42:30+07:00))
2021-08-05 17:42:41 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4907371265933213986, userId=589832318928355880, text=ultricies consectetuer amet massa adipiscing Kafka pulvinar purus porttitor porttitor, createdAt=2021-07-26T15:08:36+07:00))
2021-08-05 17:42:41 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2427052170279975374, userId=263664322945031278, text=ipsum dolor sit libero ipsum Kafka sit ultricies sit purus, createdAt=2021-07-26T15:22:52+07:00))
2021-08-05 17:42:42 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6767234865735190290, userId=4067660495888966105, text=porttitor sed consectetuer sit adipiscing Kafka posuere dolor sit sed, createdAt=2021-07-26T15:33:24+07:00))
2021-08-05 17:42:42 [parallel-1] INFO  reactor.Flux.Map.2 - request(24)
2021-08-05 17:42:42 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3623670829849242112, userId=4792612994037303391, text=ipsum libero sit amet adipiscing Kafka posuere elit ipsum sit, createdAt=2021-07-26T15:31:54+07:00))
2021-08-05 17:42:43 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1550522168645204140, userId=3759867453587386501, text=porttitor libero sit porttitor amet Kafka elit posuere sit consectetuer, createdAt=2021-07-27T10:31:38Z))
2021-08-05 17:42:43 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5419818686318780101, userId=2260837253464764178, text=ipsum Maecenas purus elit massa Kafka magna consectetuer sit sed, createdAt=2021-07-27T10:36:29Z))
2021-08-05 17:42:44 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1931075580729887576, userId=8919118874110737665, text=ultricies consectetuer Fusce elit dolor Kafka magna adipiscing dolor lectus, createdAt=2021-07-30T10:05:51Z))
2021-08-05 17:42:44 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8714090519834041105, userId=2606083834965476129, text=sed pulvinar Lorem ipsum consectetuer sed Kafka ipsum dolor sit consectetuer, createdAt=2021-07-26T14:30:48+07:00))
2021-08-05 17:42:45 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1134395133650359029, userId=1041536791474242234, text=amet lectus massa consectetuer ultricies amet Kafka massa magna dolor sit, createdAt=2021-07-26T14:50:01+07:00))
2021-08-05 17:42:45 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1183969179335643467, userId=1668375057148801148, text=ultricies Lorem posuere porttitor sit ipsum Kafka congue amet ipsum posuere, createdAt=2021-07-26T14:35:49+07:00))
2021-08-05 17:42:46 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3060139641388490458, userId=8193361242454704398, text=Lorem amet magna sed massa adipiscing Kafka massa malesuada ipsum consectetuer, createdAt=2021-07-26T14:38:29+07:00))
2021-08-05 17:42:46 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5441125883779941672, userId=7724897967463604121, text=magna libero Fusce malesuada congue pulvinar Kafka magna dolor ipsum ultricies, createdAt=2021-07-26T15:13:28+07:00))
2021-08-05 17:42:47 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=295337647063970275, userId=1172614501119330382, text=purus Maecenas porttitor consectetuer amet ultricies Kafka Maecenas Lorem Lorem sed, createdAt=2021-07-26T15:32:44+07:00))
2021-08-05 17:42:47 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5484139225139821064, userId=3651276376772312783, text=ultricies purus congue libero Fusce pulvinar Kafka sit Fusce massa malesuada, createdAt=2021-07-27T10:30:58Z))
2021-08-05 17:42:48 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422163328370098177, userId=1234068688183156736, text="Beyinlerimiz savaşsın isterdim ama görüyorum ki siz silahsızsınız bayım."
                            
                         - Fransız Kafka, createdAt=2021-08-02T18:52:14+07:00))
2021-08-05 17:42:48 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1421045483489873920, userId=744868620, text=like Orwell also Kafka is not meant as a handbook
#CraigMurray #Assange, createdAt=2021-07-30T16:50:19+07:00))
2021-08-05 17:42:49 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3309477115662805592, userId=8697837300503729723, text=Lorem elit amet amet congue ultricies Kafka congue massa dolor ipsum porttitor, createdAt=2021-07-26T14:36:49+07:00))
2021-08-05 17:42:49 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5386587467360105117, userId=4143610365090291781, text=Maecenas malesuada congue ultricies malesuada Lorem Kafka pulvinar malesuada sit dolor pulvinar, createdAt=2021-07-26T14:35:39+07:00))
2021-08-05 17:42:50 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=117246751212424066, userId=5377945940719265560, text=ipsum magna libero lectus magna ultricies Kafka libero consectetuer Fusce purus pulvinar, createdAt=2021-07-26T15:04:55+07:00))
2021-08-05 17:42:50 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1590168500142904782, userId=8235024682767325195, text=ultricies posuere malesuada ultricies lectus ultricies Kafka amet sit libero lectus libero, createdAt=2021-07-26T14:39:59+07:00))
2021-08-05 17:42:51 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2014654582418452906, userId=4488144798302653699, text=adipiscing malesuada malesuada sit magna sit Kafka massa posuere adipiscing congue Maecenas, createdAt=2021-07-26T15:19:41+07:00))
2021-08-05 17:42:51 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6593272401298080887, userId=1811673596340720957, text=pulvinar malesuada elit Lorem congue libero Kafka pulvinar magna malesuada massa sit, createdAt=2021-07-26T09:41:40Z))
2021-08-05 17:42:52 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6053522845398277665, userId=7709832382535533315, text=posuere ipsum massa massa libero sed Kafka libero congue porttitor dolor purus, createdAt=2021-07-26T09:45:50Z))
2021-08-05 17:42:52 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1585409269023190784, userId=3921858341466437709, text=Lorem lectus sed Maecenas Maecenas consectetuer Kafka massa magna congue malesuada purus, createdAt=2021-07-27T10:33:59Z))
2021-08-05 17:42:53 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2281630383517303034, userId=3107625207445197226, text=porttitor Fusce posuere magna Maecenas magna pulvinar Kafka sed libero lectus malesuada ipsum, createdAt=2021-07-26T15:04:45+07:00))
2021-08-05 17:42:53 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2456867500274087988, userId=838670091172196883, text=Lorem malesuada posuere magna lectus dolor porttitor Kafka magna amet massa sit massa, createdAt=2021-07-26T15:23:22+07:00))
2021-08-05 17:42:54 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1430448915276121310, userId=906889588125833308, text=magna congue Lorem consectetuer adipiscing malesuada adipiscing Kafka elit ipsum consectetuer adipiscing libero, createdAt=2021-07-26T15:36:15+07:00))
2021-08-05 17:42:54 [parallel-1] INFO  reactor.Flux.Map.2 - request(24)
2021-08-05 17:42:54 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2908458315232951183, userId=5638094622761023694, text=dolor porttitor pulvinar Fusce porttitor amet posuere Kafka consectetuer Maecenas sit consectetuer magna, createdAt=2021-07-26T15:35:35+07:00))
2021-08-05 17:42:55 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1346806364935902717, userId=1342935179248634059, text=malesuada posuere amet massa libero sed amet Kafka malesuada massa congue pulvinar purus, createdAt=2021-07-26T09:44:20Z))
2021-08-05 17:42:55 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8853031541268519012, userId=2206952146899472606, text=libero magna congue dolor malesuada posuere elit Kafka adipiscing ultricies Lorem dolor pulvinar, createdAt=2021-07-27T10:34:29Z))
2021-08-05 17:42:56 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6667606914811194768, userId=6750172216419144313, text=malesuada amet malesuada libero Fusce Fusce pulvinar Kafka sed ipsum consectetuer congue Fusce ipsum, createdAt=2021-07-26T14:44:20+07:00))
2021-08-05 17:42:56 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8720212136459640302, userId=8762251491455957264, text=lectus consectetuer congue amet amet ipsum dolor Kafka Maecenas adipiscing dolor pulvinar sit massa, createdAt=2021-07-26T14:32:48+07:00))
2021-08-05 17:42:57 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5862022960241408389, userId=4394243795644728583, text=ipsum porttitor purus massa ultricies ultricies consectetuer Kafka elit Lorem Maecenas massa consectetuer massa, createdAt=2021-07-26T15:22:42+07:00))
2021-08-05 17:42:57 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3899320226530921002, userId=3009735476035889474, text=Fusce ultricies posuere Lorem purus pulvinar sed Kafka magna libero sit libero adipiscing consectetuer, createdAt=2021-07-26T15:28:03+07:00))
2021-08-05 17:42:58 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8057573462274103020, userId=7270917746386867374, text=Lorem libero elit dolor ultricies consectetuer amet posuere Kafka dolor adipiscing dolor libero malesuada posuere, createdAt=2021-07-26T14:31:28+07:00))
2021-08-05 17:42:58 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6880145128342011323, userId=1963800813722275458, text=lectus magna congue porttitor purus libero sit libero Kafka pulvinar amet lectus porttitor sed pulvinar, createdAt=2021-07-26T14:51:52+07:00))
2021-08-05 17:42:59 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5614107994765876407, userId=8428415356902645713, text=pulvinar massa Lorem elit consectetuer ipsum pulvinar ultricies Kafka Fusce adipiscing massa sit sit lectus, createdAt=2021-07-26T14:52:52+07:00))
2021-08-05 17:42:59 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=2291621494029425471, userId=1438156041415626377, text=ultricies amet adipiscing elit consectetuer sit ultricies dolor Kafka posuere posuere pulvinar magna malesuada posuere, createdAt=2021-07-26T14:58:43+07:00))
2021-08-05 17:43:00 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3720480056566308131, userId=1420302624863914601, text=congue ipsum ultricies purus amet elit purus amet Kafka ipsum congue pulvinar ipsum sed massa, createdAt=2021-07-26T15:11:27+07:00))
2021-08-05 17:43:00 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7693904424711046643, userId=6871599133048265669, text=amet massa ipsum purus purus lectus Fusce Fusce Kafka dolor magna posuere consectetuer malesuada massa, createdAt=2021-07-26T15:33:04+07:00))
2021-08-05 17:43:01 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7987671638862274993, userId=4052109570304230636, text=Fusce malesuada porttitor Maecenas libero amet dolor consectetuer Kafka malesuada malesuada sed amet libero ipsum, createdAt=2021-07-26T14:54:22+07:00))
2021-08-05 17:43:01 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=9216784116454931562, userId=8670691132889342104, text=purus libero purus purus malesuada dolor massa adipiscing Kafka adipiscing adipiscing Maecenas posuere posuere malesuada, createdAt=2021-07-26T15:00:24+07:00))
2021-08-05 17:43:02 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=5748234686292073712, userId=8120304127724159944, text=porttitor amet Maecenas Fusce ipsum consectetuer malesuada ipsum Kafka Lorem massa ipsum ultricies dolor ultricies, createdAt=2021-07-26T15:11:57+07:00))
2021-08-05 17:43:02 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=663144206100499430, userId=5573291019530254989, text=congue ipsum elit consectetuer ipsum pulvinar elit malesuada Kafka pulvinar posuere sed porttitor consectetuer posuere, createdAt=2021-07-26T15:27:33+07:00))
2021-08-05 17:43:03 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6558115410916753710, userId=9086490142521478449, text=elit adipiscing adipiscing malesuada dolor ipsum purus ipsum Kafka pulvinar magna massa purus massa sit, createdAt=2021-07-26T14:32:38+07:00))
2021-08-05 17:43:03 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=6931234226188497347, userId=5020253436310468714, text=pulvinar adipiscing Lorem libero consectetuer massa purus ultricies Kafka sit dolor pulvinar sed dolor sed, createdAt=2021-07-26T14:43:30+07:00))
2021-08-05 17:43:04 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8880375635061847848, userId=6862563791946064592, text=posuere consectetuer elit magna elit sit sed posuere Kafka massa consectetuer sit libero sit massa, createdAt=2021-07-26T15:33:14+07:00))
2021-08-05 17:43:04 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422164582441754626, userId=1072734240767234049, text=RT @pepi_nim_: -อ่าน Kafka on the shore แล้วร้องไห้
-คิดถึงเมมเบอร์ GOT7
-มีคนถามว่าคุนอยู่ที่ไหน แจบอมบอกว่า แมวชื่อคุน เฉยๆจ้า 
-ทำยังจะเ…, createdAt=2021-08-02T18:57:13+07:00))
2021-08-05 17:43:05 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422164817381511170, userId=709787533136138241, text=RT @pepi_nim_: -อ่าน Kafka on the shore แล้วร้องไห้
-คิดถึงเมมเบอร์ GOT7
-มีคนถามว่าคุนอยู่ที่ไหน แจบอมบอกว่า แมวชื่อคุน เฉยๆจ้า 
-ทำยังจะเ…, createdAt=2021-08-02T18:58:09+07:00))
2021-08-05 17:43:05 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422188527815516160, userId=2607871002, text=RT @pepi_nim_: -อ่าน Kafka on the shore แล้วร้องไห้
-คิดถึงเมมเบอร์ GOT7
-มีคนถามว่าคุนอยู่ที่ไหน แจบอมบอกว่า แมวชื่อคุน เฉยๆจ้า 
-ทำยังจะเ…, createdAt=2021-08-02T13:32:22Z))
2021-08-05 17:43:06 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=4613210846292621990, userId=5396270724269897574, text=dolor malesuada purus amet lectus porttitor congue magna Kafka amet ipsum porttitor purus ipsum sit Lorem, createdAt=2021-07-26T15:01:24+07:00))
2021-08-05 17:43:06 [parallel-1] INFO  reactor.Flux.Map.2 - request(24)
2021-08-05 17:43:06 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=7422582878256878538, userId=9018943332588576462, text=Lorem sed amet lectus ipsum adipiscing ipsum lectus Kafka pulvinar magna ipsum dolor porttitor Maecenas lectus, createdAt=2021-07-26T14:49:51+07:00))
2021-08-05 17:43:07 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=3971238940296106513, userId=764174661961079562, text=sit ipsum Maecenas malesuada ipsum congue ultricies sed Kafka porttitor massa dolor ipsum dolor purus adipiscing, createdAt=2021-07-26T14:53:02+07:00))
2021-08-05 17:43:07 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=8250848735908878406, userId=3334663991855153343, text=posuere pulvinar sed massa dolor consectetuer porttitor congue Kafka consectetuer adipiscing lectus magna posuere consectetuer malesuada, createdAt=2021-07-26T15:29:23+07:00))
2021-08-05 17:43:08 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=519410000734721429, userId=195794894677924300, text=magna sed sit massa Fusce dolor elit congue Kafka Maecenas libero ipsum sed ultricies posuere massa, createdAt=2021-07-26T15:30:53+07:00))
2021-08-05 17:43:08 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422184614462771207, userId=1389924176337670150, text=RT @MarkBeom_France: 🌴— Twitter • 2021.08.02 | @jaybnow____hr

🐥 J'ai lu 'Kafka sur le Rivage' et la fin était juste... j'ai juste... wow..…, createdAt=2021-08-02T13:16:49Z))
2021-08-05 17:43:09 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422164095848099841, userId=1331292123237392388, text=RT @seanmdav: Ready for some Kafka-esque airline insanity? @AmericanAir cancelled not one, but two of my flights, stranded me overnight, di…, createdAt=2021-08-02T18:55:17+07:00))
2021-08-05 17:43:09 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422164657976971268, userId=3085366819, text=RT @zoolooy: @m7mdkurd I think Kafka wrote a story something like this. 
If it weren't all so disgustingly violent/painful, the absurdity c…, createdAt=2021-08-02T18:57:31+07:00))
2021-08-05 17:43:09 [parallel-8] INFO  reactor.Flux.Map.2 - onComplete()
2021-08-05 18:00:18 [background-preinit] INFO  o.h.validator.internal.util.Version - HV000001: Hibernate Validator 6.2.0.Final
2021-08-05 18:00:20 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Fetching config from server at : http://localhost:8888
2021-08-05 18:00:22 [main] INFO  o.s.c.c.c.ConfigServicePropertySourceLocator - Located environment: name=reactive-elastic-query-service,config-client, profiles=[reactive_elastic_query], label=null, version=a60309826d759c4674a8904540d1da1a454d5f59, state=null
2021-08-05 18:00:22 [main] INFO  o.s.c.b.c.PropertySourceBootstrapConfiguration - Located property source: [BootstrapPropertySource {name='bootstrapProperties-configClient'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/OnceUponATimeMathley/spring-cloud-config-server-repository-3/config-client-reactive_elastic_query.yml'}, BootstrapPropertySource {name='bootstrapProperties-https://github.com/OnceUponATimeMathley/spring-cloud-config-server-repository-3/config-client.yml'}]
2021-08-05 18:00:22 [main] INFO  c.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - The following profiles are active: reactive_elastic_query
2021-08-05 18:00:23 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Elasticsearch repositories in DEFAULT mode.
2021-08-05 18:00:23 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 179 ms. Found 0 Elasticsearch repository interfaces.
2021-08-05 18:00:23 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Bootstrapping Spring Data Reactive Elasticsearch repositories in DEFAULT mode.
2021-08-05 18:00:23 [main] INFO  o.s.d.r.c.RepositoryConfigurationDelegate - Finished Spring Data repository scanning in 16 ms. Found 1 Reactive Elasticsearch repository interfaces.
2021-08-05 18:00:24 [main] INFO  o.s.cloud.context.scope.GenericScope - BeanFactory id=f0191abf-feb8-302d-acd8-17ba40ae85b3
2021-08-05 18:00:26 [main] INFO  o.s.b.a.s.r.ReactiveUserDetailsServiceAutoConfiguration - 

Using generated security password: 2dfb76fe-2448-41ec-9201-163045bb0a6a

2021-08-05 18:00:26 [reactor-http-epoll-2] INFO  o.s.d.e.support.VersionInfo - Version Spring Data Elasticsearch: 4.2.2
2021-08-05 18:00:26 [reactor-http-epoll-2] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client in build: 7.12.1
2021-08-05 18:00:26 [reactor-http-epoll-2] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch Client used: 7.9.1
2021-08-05 18:00:26 [reactor-http-epoll-2] WARN  o.s.d.e.support.VersionInfo - Version mismatch in between Elasticsearch Clients build/use: 7.12.1 - 7.9.1
2021-08-05 18:00:26 [reactor-http-epoll-2] INFO  o.s.d.e.support.VersionInfo - Version Elasticsearch cluster: 7.9.1
2021-08-05 18:00:28 [main] INFO  o.s.cloud.commons.util.InetUtils - Cannot determine local hostname
2021-08-05 18:00:29 [main] INFO  o.s.cloud.commons.util.InetUtils - Cannot determine local hostname
2021-08-05 18:00:29 [main] INFO  o.s.b.w.e.netty.NettyWebServer - Netty started on port 8183
2021-08-05 18:00:30 [main] INFO  o.s.cloud.commons.util.InetUtils - Cannot determine local hostname
2021-08-05 18:00:31 [main] INFO  o.s.cloud.commons.util.InetUtils - Cannot determine local hostname
2021-08-05 18:00:31 [main] INFO  c.m.d.r.e.q.s.ReactiveElasticQueryServiceApplication - Started ReactiveElasticQueryServiceApplication in 15.589 seconds (JVM running for 16.867)
2021-08-05 18:01:58 [reactor-http-epoll-5] INFO  c.m.d.r.e.q.s.b.i.TwitterElasticQueryService - Querying reactive elasticsearch for text kafka
2021-08-05 18:01:58 [reactor-http-epoll-5] INFO  c.m.d.r.e.q.s.b.i.TwitterReactiveElasticQueryClient - Getting data from elasticsearch for text kafka
2021-08-05 18:01:59 [reactor-http-epoll-5] INFO  c.m.d.r.e.q.s.a.ElasticDocumentController - Returning from query reactive service for text kafka!
2021-08-05 18:02:01 [reactor-http-epoll-5] INFO  reactor.Flux.Map.1 - onSubscribe(FluxMap.MapSubscriber)
2021-08-05 18:02:01 [reactor-http-epoll-5] INFO  reactor.Flux.Map.1 - request(1)
2021-08-05 18:02:04 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1422188594819600387, userId=2432015216, text=@bookishfables Kafka on the shore, createdAt=2021-08-02T13:32:38Z))
2021-08-05 18:02:04 [reactor-http-epoll-5] INFO  reactor.Flux.Map.1 - request(31)
2021-08-05 18:02:04 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7935504013414237076, userId=9067018613546855045, text=consectetuer porttitor libero Kafka dolor pulvinar, createdAt=2021-07-26T14:35:19+07:00))
2021-08-05 18:02:05 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=970362732458547060, userId=6511121256364764925, text=amet amet lectus Kafka ultricies magna, createdAt=2021-07-26T14:52:12+07:00))
2021-08-05 18:02:06 [parallel-5] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=144582643518054114, userId=1163347418374284971, text=malesuada massa consectetuer Kafka Lorem lectus, createdAt=2021-07-26T15:04:05+07:00))
2021-08-05 18:02:06 [parallel-6] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4395427490013574756, userId=9050177874049412436, text=lectus massa Fusce Kafka ultricies pulvinar, createdAt=2021-07-26T15:07:16+07:00))
2021-08-05 18:02:07 [parallel-7] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=161266336498020395, userId=2447898248118699533, text=adipiscing pulvinar dolor Kafka Maecenas Maecenas, createdAt=2021-07-26T14:38:19+07:00))
2021-08-05 18:02:07 [parallel-8] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=453636222838194273, userId=8087472809104594091, text=adipiscing Maecenas magna Kafka Maecenas ipsum, createdAt=2021-07-26T15:05:36+07:00))
2021-08-05 18:02:08 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4450632076280244782, userId=6636173432506892473, text=malesuada malesuada porttitor Kafka ultricies massa, createdAt=2021-07-26T15:14:19+07:00))
2021-08-05 18:02:08 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=243647193905508163, userId=1892070911316845250, text=adipiscing porttitor dolor Kafka purus Lorem, createdAt=2021-07-26T15:25:22+07:00))
2021-08-05 18:02:09 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5569144833852477134, userId=3021359567818212026, text=congue massa ultricies Kafka libero adipiscing, createdAt=2021-07-26T14:37:59+07:00))
2021-08-05 18:02:09 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=4093968151609226290, userId=8192974543787419305, text=sit congue sed Kafka purus massa, createdAt=2021-07-26T14:43+07:00))
2021-08-05 18:02:10 [parallel-5] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8510138514362550221, userId=1726216321429027976, text=ipsum Maecenas sit Kafka Lorem purus, createdAt=2021-07-26T09:41:50Z))
2021-08-05 18:02:10 [parallel-6] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5089325387885561108, userId=1120944075323190247, text=libero amet libero Kafka Fusce Maecenas, createdAt=2021-07-30T10:04:39Z))
2021-08-05 18:02:11 [parallel-7] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2571128835014305250, userId=850575373011826900, text=sit ultricies massa Kafka ipsum Fusce, createdAt=2021-07-30T10:32:22Z))
2021-08-05 18:02:11 [parallel-8] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=12687913972681737, userId=1026946484615377395, text=elit dolor massa consectetuer Kafka malesuada purus, createdAt=2021-07-26T15:09:17+07:00))
2021-08-05 18:02:12 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2243581543925972786, userId=7580404732176931509, text=amet Lorem malesuada Fusce Kafka magna elit, createdAt=2021-07-26T15:14:39+07:00))
2021-08-05 18:02:12 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2670794498696099680, userId=5733350334614675185, text=Maecenas consectetuer ultricies dolor Kafka posuere Maecenas, createdAt=2021-07-26T15:18:20+07:00))
2021-08-05 18:02:13 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7298767918109903776, userId=2179650342387538300, text=pulvinar ipsum ipsum congue Kafka sit pulvinar, createdAt=2021-07-26T14:29:08+07:00))
2021-08-05 18:02:13 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5500524529411575893, userId=2582561074637908908, text=lectus congue ipsum porttitor Kafka sed consectetuer, createdAt=2021-07-26T14:34:49+07:00))
2021-08-05 18:02:14 [parallel-5] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=8570330742704989871, userId=3627074620486574549, text=dolor posuere ipsum Maecenas Kafka congue elit, createdAt=2021-07-26T15:02:35+07:00))
2021-08-05 18:02:14 [parallel-6] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1550784481632136040, userId=1538469012142802687, text=pulvinar porttitor ultricies porttitor Kafka congue Fusce, createdAt=2021-07-26T15:19:11+07:00))
2021-08-05 18:02:15 [parallel-7] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6436486100303473288, userId=1638127533281526668, text=dolor porttitor massa dolor Kafka elit Fusce, createdAt=2021-07-26T15:33:34+07:00))
2021-08-05 18:02:15 [parallel-8] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=816752024160554394, userId=6603269068494629107, text=malesuada libero Lorem libero Kafka congue dolor, createdAt=2021-07-26T09:45Z))
2021-08-05 18:02:16 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2608530918311994986, userId=736537647812659885, text=libero pulvinar sed elit Kafka Lorem magna sed, createdAt=2021-07-26T15:10:47+07:00))
2021-08-05 18:02:16 [parallel-1] INFO  reactor.Flux.Map.1 - request(24)
2021-08-05 18:02:16 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5647614968859665430, userId=1920117532386996799, text=malesuada congue ipsum magna Kafka Maecenas posuere congue, createdAt=2021-07-26T14:59:44+07:00))
2021-08-05 18:02:17 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2187635374507147039, userId=3309695578628169255, text=congue sit congue lectus Kafka amet Maecenas ipsum, createdAt=2021-07-26T15:18:51+07:00))
2021-08-05 18:02:17 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1222064297714110326, userId=5255565729753437423, text=purus congue consectetuer lectus Kafka sed malesuada elit, createdAt=2021-07-26T15:17+07:00))
2021-08-05 18:02:18 [parallel-5] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6984393853914813100, userId=1109038015006958318, text=Lorem dolor adipiscing purus Kafka sed porttitor purus, createdAt=2021-07-26T15:22:32+07:00))
2021-08-05 18:02:18 [parallel-6] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=1379815561212798684, userId=6694080825102144540, text=malesuada libero malesuada magna Kafka pulvinar malesuada posuere, createdAt=2021-07-26T15:34:54+07:00))
2021-08-05 18:02:19 [parallel-7] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3895000499844196258, userId=8062208312900369045, text=ipsum sed purus sit Kafka pulvinar porttitor Maecenas, createdAt=2021-07-26T14:32:08+07:00))
2021-08-05 18:02:19 [parallel-8] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6790575607235660761, userId=4442999735200209432, text=Fusce Maecenas Maecenas Lorem Kafka lectus elit ultricies, createdAt=2021-07-26T15:30:23+07:00))
2021-08-05 18:02:20 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3351791504231923291, userId=8005107336198916740, text=lectus massa Fusce sit Kafka massa purus magna, createdAt=2021-07-26T15:30:33+07:00))
2021-08-05 18:02:20 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2501876899854458924, userId=7654692692597648850, text=amet massa ultricies libero Kafka dolor elit consectetuer, createdAt=2021-07-26T09:45:20Z))
2021-08-05 18:02:21 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=157598554127354424, userId=3856836065782627785, text=ultricies ultricies elit sit Kafka Maecenas dolor Lorem, createdAt=2021-07-30T10:06:11Z))
2021-08-05 18:02:21 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5321815132974402253, userId=8863131391158178029, text=pulvinar Fusce elit lectus libero Kafka Lorem adipiscing porttitor, createdAt=2021-07-26T14:56:22+07:00))
2021-08-05 18:02:22 [parallel-5] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=2771967807014667753, userId=6150773225029605494, text=sit dolor amet pulvinar congue Kafka malesuada lectus dolor, createdAt=2021-07-26T15:26:03+07:00))
2021-08-05 18:02:22 [parallel-6] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7923629660206829460, userId=3060541225394060976, text=ipsum congue ultricies Lorem adipiscing Kafka purus posuere libero, createdAt=2021-07-26T15:00:34+07:00))
2021-08-05 18:02:23 [parallel-7] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3456222801662574214, userId=8482753726495980302, text=lectus sed consectetuer porttitor dolor Kafka pulvinar massa amet, createdAt=2021-07-26T15:26:43+07:00))
2021-08-05 18:02:23 [parallel-8] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=3234009635015145118, userId=7388470279331706419, text=magna Lorem pulvinar Fusce sed Kafka dolor amet Fusce, createdAt=2021-07-26T09:44Z))
2021-08-05 18:02:24 [parallel-1] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=7814959751481028627, userId=7824066283859977023, text=purus massa sed amet ipsum Kafka elit Maecenas Fusce, createdAt=2021-07-30T10:07:01Z))
2021-08-05 18:02:24 [parallel-2] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=6430171541309095525, userId=5026411651797320844, text=massa elit Lorem amet Lorem Kafka elit elit Fusce, createdAt=2021-07-30T10:32:32Z))
2021-08-05 18:02:25 [parallel-3] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=9202533460243443363, userId=1628216668952273253, text=sed lectus elit posuere dolor Kafka amet posuere Lorem libero, createdAt=2021-07-26T14:53:22+07:00))
2021-08-05 18:02:25 [parallel-4] INFO  reactor.Flux.Map.1 - onNext(ElasticQueryServiceResponseModel(id=5845039887700473324, userId=1037217425713133746, text=sed purus pulvinar sit magna Kafka purus Lorem adipiscing dolor, createdAt=2021-07-26T15:19:21+07:00))
2021-08-05 18:02:25 [reactor-http-epoll-5] INFO  reactor.Flux.Map.1 - cancel()
2021-08-05 18:02:25 [reactor-http-epoll-6] INFO  c.m.d.r.e.q.s.b.i.TwitterElasticQueryService - Querying reactive elasticsearch for text test
2021-08-05 18:02:25 [reactor-http-epoll-6] INFO  c.m.d.r.e.q.s.b.i.TwitterReactiveElasticQueryClient - Getting data from elasticsearch for text test
2021-08-05 18:02:25 [reactor-http-epoll-6] INFO  c.m.d.r.e.q.s.a.ElasticDocumentController - Returning from query reactive service for text test!
2021-08-05 18:02:25 [reactor-http-epoll-6] INFO  reactor.Flux.Map.2 - onSubscribe(FluxMap.MapSubscriber)
2021-08-05 18:02:25 [reactor-http-epoll-6] INFO  reactor.Flux.Map.2 - request(1)
2021-08-05 18:02:28 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1, userId=1, text=test multi word, createdAt=2020-01-01T23:00:50Z))
2021-08-05 18:02:28 [reactor-http-epoll-6] INFO  reactor.Flux.Map.2 - request(31)
2021-08-05 18:02:28 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1421017389978853376, userId=1051516134204289024, text=10/10 yaptigim tek test, createdAt=2021-07-30T14:58:41+07:00))
2021-08-05 18:02:29 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1421017733999726593, userId=1398219737138561024, text=RT @jenniecullen18: ชุดตรวจ Antigen test kit ต่างจาก Antibody test kit อย่างไร
#โควิด19 #วัคซีนโควิด 
#กระทรวงสาธารณสุข
#กรมควบคุมโรค
#มณฑล…, createdAt=2021-07-30T15:00:03+07:00))
2021-08-05 18:02:29 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422164519586078722, userId=2964413607, text=RT @Zitounenahnah: "Si elle me demande un test VIH je lui demande un test de virginité" https://t.co/SaZDjGbIOg, createdAt=2021-08-02T18:56:58+07:00))
2021-08-05 18:02:30 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422163936552624129, userId=1358969828, text=RT @Go_CheshireWest: 🧪 Please continue to get a free twice-weekly COVID-19 lateral flow test - even if you’ve been vaccinated.

Pop-up test…, createdAt=2021-08-02T18:54:39+07:00))
2021-08-05 18:02:30 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422168634126970881, userId=1296091443996524544, text=RT @FCBarcelona: MEDICAL TEST ✅
@Emerson_Royal22 https://t.co/7lo5I2xTIJ, createdAt=2021-08-02T19:13:19+07:00))
2021-08-05 18:02:31 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422166054718029834, userId=1235210147640864769, text=RT @FCBarcelona: MEDICAL TEST ✅
@Emerson_Royal22 https://t.co/7lo5I2xTIJ, createdAt=2021-08-02T19:03:04+07:00))
2021-08-05 18:02:31 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422188162839760896, userId=338261225, text=RT @tq3illl: ginting test cpns era https://t.co/ONTQuHi0vs, createdAt=2021-08-02T13:30:55Z))
2021-08-05 18:02:32 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422524835322732544, userId=380268047, text=RT @tq3illl: ginting test cpns era https://t.co/ONTQuHi0vs, createdAt=2021-08-03T11:48:44Z))
2021-08-05 18:02:32 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422189312016207873, userId=3143059206, text=RT @tq3illl: ginting test cpns era https://t.co/ONTQuHi0vs, createdAt=2021-08-02T13:35:29Z))
2021-08-05 18:02:33 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1421044313279053827, userId=1079641459987484672, text=RT @YinFinance: #YIN Finance will launch test-net ⏱on GMT 00:00 July 30th, welcome to our test-net and experience better liquidity manageme…, createdAt=2021-07-30T16:45:40+07:00))
2021-08-05 18:02:33 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1421045659633819649, userId=1413161363417882624, text=RT @YinFinance: #YIN Finance will launch test-net ⏱on GMT 00:00 July 30th, welcome to our test-net and experience better liquidity manageme…, createdAt=2021-07-30T16:51:01+07:00))
2021-08-05 18:02:34 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1421017251595964417, userId=1194090652713115648, text=RT @YinFinance: #YIN Finance will launch test-net ⏱on GMT 00:00 July 30th, welcome to our test-net and experience better liquidity manageme…, createdAt=2021-07-30T14:58:08+07:00))
2021-08-05 18:02:34 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1421017188677398528, userId=1145435359897096198, text=RT @YinFinance: #YIN Finance will launch test-net ⏱on GMT 00:00 July 30th, welcome to our test-net and experience better liquidity manageme…, createdAt=2021-07-30T14:57:53+07:00))
2021-08-05 18:02:35 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1421016685348233218, userId=224630719, text=RT @YinFinance: #YIN Finance will launch test-net ⏱on GMT 00:00 July 30th, welcome to our test-net and experience better liquidity manageme…, createdAt=2021-07-30T14:55:53+07:00))
2021-08-05 18:02:35 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422163240331595778, userId=1406138108106641410, text=RT @YinFinance: #YIN Finance will launch test-net ⏱on GMT 00:00 July 30th, welcome to our test-net and experience better liquidity manageme…, createdAt=2021-08-02T18:51:53+07:00))
2021-08-05 18:02:36 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422163668003819520, userId=870258396, text=RT @ansaffh: Anak pun kena test 🤣 https://t.co/06wMNN409g, createdAt=2021-08-02T18:53:35+07:00))
2021-08-05 18:02:36 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422184580535234564, userId=1155367133028769792, text=RT @EEAccelerator: "The #ClimateCrisis is THE TEST of our time.", createdAt=2021-08-02T13:16:41Z))
2021-08-05 18:02:37 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1423201162816200707, userId=1416022400152465409, text=RT @4hr0min: Nobody:

Me in math test: https://t.co/tIUjdtHE0j, createdAt=2021-08-05T08:36:13Z))
2021-08-05 18:02:37 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422164960008880130, userId=296283102, text=RT @Springboks: 🎥 A great performance in the second Test but it is all to play for in the third and final Test match against the @lionsoffi…, createdAt=2021-08-02T18:58:43+07:00))
2021-08-05 18:02:38 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1421044493604638722, userId=264803129, text=RT @maimeetangka327: ไม่รู้มีคนรู้มั้ย แทบตรวจ strip test ถ้าขึ้นจางๆ ก็นับเป็นบวกนะทุกคน ไม่จำเป็นต้องเข้มเท่าแถบ control อันนี้ญาติส่งมาถ…, createdAt=2021-07-30T16:46:23+07:00))
2021-08-05 18:02:38 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1421017771677294596, userId=1308105922850430976, text=Distinctio debitis error corrupti - True Anthem Test Content https://t.co/nEntTVlybu, createdAt=2021-07-30T15:00:12+07:00))
2021-08-05 18:02:39 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1421017125762732033, userId=539955840, text=RT @maimeetangka327: ไม่รู้มีคนรู้มั้ย แทบตรวจ strip test ถ้าขึ้นจางๆ ก็นับเป็นบวกนะทุกคน ไม่จำเป็นต้องเข้มเท่าแถบ control อันนี้ญาติส่งมาถ…, createdAt=2021-07-30T14:57:38+07:00))
2021-08-05 18:02:39 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1421017067201855488, userId=1318173555171885056, text=RT @nanaicez: ขอแนะนำเทียนไม่เหม็นกะทิบ้าง adorescentbkk กลิ่นร้านนี้เราว่ามันเก๋ต่างจากกลิ่นร้านทั่วไป เช่น Bad love good test มีกลิ่นควัน…, createdAt=2021-07-30T14:57:24+07:00))
2021-08-05 18:02:39 [parallel-6] INFO  reactor.Flux.Map.2 - request(24)
2021-08-05 18:02:40 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1421016672761114630, userId=800682685756649473, text=RT @nanaicez: ขอแนะนำเทียนไม่เหม็นกะทิบ้าง adorescentbkk กลิ่นร้านนี้เราว่ามันเก๋ต่างจากกลิ่นร้านทั่วไป เช่น Bad love good test มีกลิ่นควัน…, createdAt=2021-07-30T14:55:50+07:00))
2021-08-05 18:02:40 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422184945494024193, userId=2209453538, text=Indian openers before every  major overseas test tour... https://t.co/OcdP7M1rdB, createdAt=2021-08-02T13:18:08Z))
2021-08-05 18:02:41 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422168080550178821, userId=2718632805, text=RT @therealalisonw: when i do my own covid test https://t.co/vbvcMr4QEB, createdAt=2021-08-02T19:11:07+07:00))
2021-08-05 18:02:41 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422168705396523008, userId=416186211, text=Punaise jvai devoir aller faire un test pour allez voir le film, createdAt=2021-08-02T19:13:36+07:00))
2021-08-05 18:02:42 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1421045097555062785, userId=1419909380330295296, text=RT @Evatwenty: Do you want to test my body?🍑 https://t.co/HYYGKiRNNY, createdAt=2021-07-30T16:48:47+07:00))
2021-08-05 18:02:42 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422188775116058626, userId=2720823307, text=RT @formyths: style test for the comic i'm working on https://t.co/Wq4ctwUnfl, createdAt=2021-08-02T13:33:21Z))
2021-08-05 18:02:43 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422525422663835671, userId=1191800877146877952, text=RT @espanamelon: La sonrisa de alguien que se libra de un test de orín., createdAt=2021-08-03T11:51:04Z))
2021-08-05 18:02:43 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1421045025572487172, userId=758017928151179264, text=@hellspawnlucky @archivedghost It's 2:48 am. But I needed to test it out https://t.co/PwlLsmFMiH, createdAt=2021-07-30T16:48:30+07:00))
2021-08-05 18:02:44 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422164095889920003, userId=3064520108, text=RT @RudyRoedyanto: Prescon trus doping test utk semua semifinalis, runner up dan juara https://t.co/9B8mQdeuoE, createdAt=2021-08-02T18:55:17+07:00))
2021-08-05 18:02:44 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422165526193704966, userId=2163280740, text=RT @lady_yyyyy: เลดี้วายเปิดร้านแล้วจ้า!!
#ชุดตรวจโควิด พร้อมส่ง**
📌ยี่ห้อ #Humasis นำเข้าจากเกาหลี [nasal swab,nasalpharyngeal]
📌Testละ 30…, createdAt=2021-08-02T19:00:58+07:00))
2021-08-05 18:02:45 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422166721515847681, userId=1359411309616328711, text=RT @PikhaDina: 4Fingers midvalley jb ! Contact rapat still kerja harini & belum swab test https://t.co/mawyVKxcSi, createdAt=2021-08-02T19:05:43+07:00))
2021-08-05 18:02:45 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422188875850649606, userId=2266171558, text=RT @shxmIess: what would she do if she never passed her driving test https://t.co/mkNLCCA3j8, createdAt=2021-08-02T13:33:45Z))
2021-08-05 18:02:46 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422189316319551493, userId=1715128544, text=RT @poppyminp: ฝากรีหน่อยค้ามะกี่พิมพ์บ่ครบ เพื่อนฝากขาย Rapid test ชุดล่ะ 200 บาทต่อชิ้น ไม่เคยเจอที่ไหนถูกเท่านี้ / 1 กล่อง 25 ชุด ราคา 4…, createdAt=2021-08-02T13:35:30Z))
2021-08-05 18:02:46 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422140817582575618, userId=1374849110923214852, text=RT @kaynaknese: Artık bildirileriniz, vesayetleriniz, darbeleriniz sökmez.!
Kimse, 
Bu milletin nabzını da, sabrını da test etmeye kalkması…, createdAt=2021-08-02T17:22:47+07:00))
2021-08-05 18:02:47 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422186090799243267, userId=1766665758, text=RT @DWUhlfelderLaw: Four hour wait to get COVID-19 test in Orlando, Florida today https://t.co/V1AAGFYbhH, createdAt=2021-08-02T13:22:41Z))
2021-08-05 18:02:47 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422184190607511556, userId=2835390941, text=RT @DWUhlfelderLaw: Four hour wait to get COVID-19 test in Orlando, Florida today https://t.co/V1AAGFYbhH, createdAt=2021-08-02T13:15:08Z))
2021-08-05 18:02:48 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422187827278852099, userId=1415321748480921604, text=RT @kaynaknese: Artık bildirileriniz, vesayetleriniz, darbeleriniz sökmez.!
Kimse, 
Bu milletin nabzını da, sabrını da test etmeye kalkması…, createdAt=2021-08-02T13:29:35Z))
2021-08-05 18:02:48 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1423200944628568066, userId=2981444423, text=RT @cafe_borsa1: #asels 200g EMA 15.79 TL fiyatını test etti ve 16.09'a yükseldi. https://t.co/HPdX6LE3Cx, createdAt=2021-08-05T08:35:21Z))
2021-08-05 18:02:49 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1421045923845591045, userId=1336881787906101250, text=RT @detailsoftoday: ทุกคน ตรวจ lapid test ก็ใช่ว่าผลจะแม่นนะคะ มันตรวจเบื้องต้นเฉยๆ น้ำตรวจ4อัน ขึ้น2ขีดทั้ง4อัน(แต่เก็บมาแค่นี้) ตอนแรกคิด…, createdAt=2021-07-30T16:52:04+07:00))
2021-08-05 18:02:49 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422178809579675648, userId=1351447613799759874, text=RT @CricNeelabh: Virat Kohli and Joe Root with the India-England Test series trophy.
#ENGvIND https://t.co/hVbG5waWKs, createdAt=2021-08-02T12:53:45Z))
2021-08-05 18:02:50 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422163939949961224, userId=1397467629154099201, text=Theo Pourchaire will test a Formula One car for the first time later this week.

The F2 rookie and Sauber Academy driver will take part in a Pirelli 2022 tyre test in an Alfa Romeo at the Hungaroring.

#TheFormula / #F1 / #HungarianGP https://t.co/BCQVNqiuiP, createdAt=2021-08-02T18:54:40+07:00))
2021-08-05 18:02:50 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1421044455805652994, userId=340187272, text=RT @ImanAbdulRahim: Ohhh boleh beli Covid-19 self test kit dekat MySejahtera sekarang! Kena update dulu. https://t.co/saDP2HYlyS, createdAt=2021-07-30T16:46:14+07:00))
2021-08-05 18:02:51 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1421044485153202176, userId=300121544, text=RT @ImanAbdulRahim: Ohhh boleh beli Covid-19 self test kit dekat MySejahtera sekarang! Kena update dulu. https://t.co/saDP2HYlyS, createdAt=2021-07-30T16:46:21+07:00))
2021-08-05 18:02:51 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1421044988528398353, userId=1058241019, text=RT @ImanAbdulRahim: Ohhh boleh beli Covid-19 self test kit dekat MySejahtera sekarang! Kena update dulu. https://t.co/saDP2HYlyS, createdAt=2021-07-30T16:48:21+07:00))
2021-08-05 18:02:51 [parallel-6] INFO  reactor.Flux.Map.2 - request(24)
2021-08-05 18:02:52 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1421045374358200321, userId=1220784397, text=RT @ImanAbdulRahim: Ohhh boleh beli Covid-19 self test kit dekat MySejahtera sekarang! Kena update dulu. https://t.co/saDP2HYlyS, createdAt=2021-07-30T16:49:53+07:00))
2021-08-05 18:02:52 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1421017524221595650, userId=1215323558, text=RT @ImanAbdulRahim: Ohhh boleh beli Covid-19 self test kit dekat MySejahtera sekarang! Kena update dulu. https://t.co/saDP2HYlyS, createdAt=2021-07-30T14:59:13+07:00))
2021-08-05 18:02:53 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1421017092204089346, userId=463918614, text=RT @ImanAbdulRahim: Ohhh boleh beli Covid-19 self test kit dekat MySejahtera sekarang! Kena update dulu. https://t.co/saDP2HYlyS, createdAt=2021-07-30T14:57:30+07:00))
2021-08-05 18:02:53 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422524759900786694, userId=1413925222881710082, text=RT @nnnancccy: ลูกอายุ1 เดือน ติดโควิด ตรวจเองที่บ้านแบบ ag test ตั้งแต่วันที่ 29/7/21 ติดต่อไป 1330 กับ 1668 ก็เงียบสนิท อยากให้ช่วยกันรีท…, createdAt=2021-08-03T11:48:26Z))
2021-08-05 18:02:54 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422525149954281472, userId=3106791391, text=RT @nnnancccy: ลูกอายุ1 เดือน ติดโควิด ตรวจเองที่บ้านแบบ ag test ตั้งแต่วันที่ 29/7/21 ติดต่อไป 1330 กับ 1668 ก็เงียบสนิท อยากให้ช่วยกันรีท…, createdAt=2021-08-03T11:49:59Z))
2021-08-05 18:02:54 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422525212751327234, userId=939061657929531393, text=RT @nnnancccy: ลูกอายุ1 เดือน ติดโควิด ตรวจเองที่บ้านแบบ ag test ตั้งแต่วันที่ 29/7/21 ติดต่อไป 1330 กับ 1668 ก็เงียบสนิท อยากให้ช่วยกันรีท…, createdAt=2021-08-03T11:50:14Z))
2021-08-05 18:02:55 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422141287356985347, userId=4766680634, text=RT @RCBTweets: #OnThisDay in 2️⃣0️⃣1️⃣8️⃣, Captain Kohli scored his first Test century in 🏴󠁧󠁢󠁥󠁮󠁧󠁿, scoring a brilliant 1️⃣4️⃣9️⃣ in Edgbads…, createdAt=2021-08-02T17:24:39+07:00))
2021-08-05 18:02:55 [parallel-6] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1421058645219889156, userId=47874909, text=RT @mansukhmandviya: National Medical Commission के साथ समीक्षा बैठक की। 
 
2023 की पहली छमाही में National Exit Test ( NExT) को सुनिश्चित…, createdAt=2021-07-30T10:42:37Z))
2021-08-05 18:02:56 [parallel-7] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422166381873745923, userId=1359895626591387650, text=RT @thehill: Hundreds of staffers at two San Francisco hospitals test positive for COVID-19 https://t.co/9mFBR5NvhK https://t.co/fZ1Nwwi70i, createdAt=2021-08-02T19:04:22+07:00))
2021-08-05 18:02:56 [parallel-8] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422167236941258760, userId=1228212887610515459, text=Virat Kohli's latest pictures in the Nets batting practice and training sessions ahead of Test Series against England. https://t.co/zvyvJJKHQP, createdAt=2021-08-02T19:07:46+07:00))
2021-08-05 18:02:57 [parallel-1] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422167346513211394, userId=211838729, text=RT @MichaelVaughan: Can’t wait for the Test series to start on Weds .. Should be a great series !! #ENGvIND https://t.co/5NErNh85C3, createdAt=2021-08-02T19:08:12+07:00))
2021-08-05 18:02:57 [parallel-2] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422184463363035146, userId=1178512596602736640, text=RT @man4_cricket: Captains Virat Kohli and Joe Root's picture with Test Series Trophy, and starting from 4th August. #INDvENG https://t.co/…, createdAt=2021-08-02T13:16:13Z))
2021-08-05 18:02:58 [parallel-3] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422187206660198411, userId=1254857304765333504, text=RT @Peryskop2: Dokument wydany przez Agencję ds. Żywności i Leków (FDA) przyznaje, że test PCR został opracowany nie na rzeczywistych próbk…, createdAt=2021-08-02T13:27:07Z))
2021-08-05 18:02:58 [parallel-4] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422187357436928004, userId=1306230604392878080, text=RT @man4_cricket: Virat Kohli's latest pictures in the Nets batting practice and training sessions ahead of Test Series against England. ht…, createdAt=2021-08-02T13:27:43Z))
2021-08-05 18:02:59 [parallel-5] INFO  reactor.Flux.Map.2 - onNext(ElasticQueryServiceResponseModel(id=1422524965488709638, userId=1343953559822376966, text=RT @thefield_in: #ENGvIND

India captain Virat Kohli is addressing a press conference ahead of the five-Test series against England.

Follo…, createdAt=2021-08-03T11:49:15Z))
2021-08-05 18:02:59 [reactor-http-epoll-6] INFO  reactor.Flux.Map.2 - cancel()
